import Mathlib.CategoryTheory.Limits.Shapes.CommSq
import Lean4.dihomotopy_cover
import Lean4.pushout_alternative
import Lean4.dihomotopy_to_path_dihomotopy
import Lean4.morphism_aux

/-
  This file contains the directed version of the Van Kampen Theorem.
  The statement is as follows:
  Let `X : dTopCat` and `X‚ÇÅ X‚ÇÇ : Set X` such that `X‚ÇÅ` and `X‚ÇÇ` are both open and `X‚ÇÅ ‚à™ X‚ÇÇ = X`.
  Let `i‚ÇÅ : X‚ÇÅ ‚à© X‚ÇÇ ‚Üí X‚ÇÅ`, `i‚ÇÇ : X‚ÇÅ ‚à© X‚ÇÇ ‚Üí X‚ÇÇ`, `j‚ÇÅ : X‚ÇÅ ‚Üí X` and `j‚ÇÇ : X‚ÇÇ ‚Üí X` be the inclusion maps in `dTopCat`.
  Then we have a pushout in `Cat`:
  dœÄ‚Çì(X‚ÇÅ ‚à© X‚ÇÇ) ------ dœÄ‚Çò i‚ÇÅ -----> dœÄ‚Çì(X‚ÇÅ)
       |                              |
       |                              |
       |                              |
     dœÄ‚Çò i‚ÇÇ                         dœÄ‚Çò j‚ÇÅ
       |                              |
       |                              |
       |                              |
    dœÄ‚Çì(X‚ÇÇ) ------- dœÄ‚Çò j‚ÇÇ ------> dœÄ‚Çì(X)

  The proof we give is constructive and is based on the proof given by
  Marco Grandis, Directed Homotopy Theory I, published in Cahiers de topologie et g√©om√©trie diff√©rentielle cat√©goriques, 44, no 4, pages 307-309, 2003.
-/

universe u v

open Set
open scoped unitInterval Classical FundamentalCategory

attribute [local instance] Dipath.Dihomotopic.setoid

noncomputable section

namespace DirectedVanKampen

open FundamentalCategory DiSubtype CategoryTheory

variable {X : dTopCat.{u}} {X‚ÇÅ X‚ÇÇ : Set X}
variable (hX : X‚ÇÅ ‚à™ X‚ÇÇ = Set.univ)
variable (X‚ÇÅ_open : IsOpen X‚ÇÅ) (X‚ÇÇ_open : IsOpen X‚ÇÇ)

-- We will use a shorthand notation for the 4 morphisms in dTop:
-- i‚ÇÅ : X‚ÇÅ ‚à© X‚ÇÇ ‚ü∂ X‚ÇÅ
local notation "i‚ÇÅ" => dTopCat.DirectedSubsetHom $ (Set.inter_subset_left X‚ÇÅ X‚ÇÇ)
-- i‚ÇÅ : X‚ÇÅ ‚à© X‚ÇÇ ‚ü∂ X‚ÇÇ
local notation "i‚ÇÇ" => dTopCat.DirectedSubsetHom $ (Set.inter_subset_right X‚ÇÅ X‚ÇÇ)
-- j‚ÇÅ : X‚ÇÅ ‚ü∂ X
local notation "j‚ÇÅ" => dTopCat.DirectedSubtypeHom X‚ÇÅ
-- j‚ÇÇ : X‚ÇÇ ‚ü∂ X
local notation "j‚ÇÇ" => dTopCat.DirectedSubtypeHom X‚ÇÇ

namespace PushoutFunctor

open Dipath Dipath.covered Dipath.covered_partwise

variable {x y : X} {C : CategoryTheory.Cat.{u, u}}
variable (F‚ÇÅ : (dœÄ‚Çì (dTopCat.of X‚ÇÅ) ‚ü∂ C)) (F‚ÇÇ : (dœÄ‚Çì (dTopCat.of X‚ÇÇ) ‚ü∂ C))
variable (h_comm : (dœÄ‚Çò (dTopCat.DirectedSubsetHom $ (Set.inter_subset_left X‚ÇÅ X‚ÇÇ))) ‚ãô F‚ÇÅ =
                  ((dœÄ‚Çò (dTopCat.DirectedSubsetHom $ (Set.inter_subset_right X‚ÇÅ X‚ÇÇ))) ‚ãô F‚ÇÇ))

section FunctorProps

open CategoryTheory

variable {Y : dTopCat.{u}} {Y‚ÇÄ : Set Y} {F : dœÄ‚Çì (dTopCat.of Y‚ÇÄ) ‚•§ C}

lemma subset_functor_trans {x y z : Y} {Œ≥‚ÇÅ : Dipath x y} {Œ≥‚ÇÇ : Dipath y z} (hŒ≥ : range (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) ‚äÜ Y‚ÇÄ) :
    (F.map ‚ü¶SubtypeDipath Œ≥‚ÇÅ (subsets_of_trans_subset hŒ≥).1‚üß ‚â´ F.map ‚ü¶SubtypeDipath Œ≥‚ÇÇ (subsets_of_trans_subset hŒ≥).2‚üß) =
      F.map ‚ü¶SubtypeDipath (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) hŒ≥‚üß := by
  rw [‚Üêsubtype_trans hŒ≥, Dipath.Dihomotopic.comp_lift]
  exact (F.map_comp _ _).symm

lemma subset_functor_reparam {x y : Y} {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ Y‚ÇÄ) {f : D(I, I)} (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
    F.map ‚ü¶SubtypeDipath (Œ≥.reparam f hf‚ÇÄ hf‚ÇÅ)
        (show range (Œ≥.reparam f hf‚ÇÄ hf‚ÇÅ) ‚äÜ Y‚ÇÄ by exact (Dipath.range_reparam Œ≥ f hf‚ÇÄ hf‚ÇÅ).symm ‚ñ∏ hŒ≥)‚üß =
        F.map ‚ü¶SubtypeDipath Œ≥ hŒ≥‚üß := by
  congr 1
  rw [subtype_reparam hŒ≥ hf‚ÇÄ hf‚ÇÅ]
  symm
  exact Quotient.eq.mpr (Dipath.Dihomotopic.reparam (SubtypeDipath Œ≥ hŒ≥) f hf‚ÇÄ hf‚ÇÅ)

lemma functor_cast {X : dTopCat} (F : (dœÄ‚Çì X) ‚•§ C) {x y x' y' : X} (Œ≥ : Dipath x y) (hx : x' = x) (hy : y' = y) :
    F.map ‚ü¶Œ≥.cast hx hy‚üß =
      (eqToHom (congrArg F.obj (congrArg FundamentalCategory.mk hx))) ‚â´ F.map ‚ü¶Œ≥‚üß ‚â´
      (eqToHom (congrArg F.obj (congrArg FundamentalCategory.mk hy)).symm) := by
  subst_vars
  simp
  congr 2

end FunctorProps

/-
  Given a category C and functors F‚ÇÅ : dœÄ‚Çì X‚ÇÅ ‚•§ C and F‚ÇÇ : dœÄ‚Çì X‚ÇÇ ‚•§ C, we will construct a functor F : dœÄ‚Çì X ‚•§ C
-/

/- ### Functor on Objects -/

/-
- Define the behaviour on objects
-/
def FunctorOnObj (x : dœÄ‚Çì X) : C :=
  Or.by_cases
    ((Set.mem_union x.as X‚ÇÅ X‚ÇÇ).mp (Filter.mem_top.mpr hX x.as))
      (fun hx => F‚ÇÅ.obj ‚ü®x.as, hx‚ü©)
      (fun hx => F‚ÇÇ.obj ‚ü®x.as, hx‚ü©)

-- We will use the shorhand notation F_obj
local notation "F_obj" => FunctorOnObj hX F‚ÇÅ F‚ÇÇ

/-
  Under the assumption that the square commutes, we can show how the functor behaves on objects
-/

variable {F‚ÇÅ F‚ÇÇ}

lemma functor_obj_apply_one {x : X} (hx : x ‚àà X‚ÇÅ) : F‚ÇÅ.obj ‚ü®x, hx‚ü© = F_obj ‚ü®x‚ü© := by
  -- TODO: This is unnecessary, but forces Lean to add the condition h_comm to functor_obj_apply_one. This keeps the symmetry
  have := h_comm
  convert (dif_pos hx).symm using 1
  rfl

lemma functor_obj_apply_two {x : X} (hx‚ÇÇ : x ‚àà X‚ÇÇ) : F‚ÇÇ.obj ‚ü®x, hx‚ÇÇ‚ü© = F_obj ‚ü®x‚ü© := by
  by_cases hx‚ÇÅ : x ‚àà X‚ÇÅ
  case pos =>
    have hx‚ÇÄ : x ‚àà X‚ÇÅ ‚à© X‚ÇÇ := ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©
    have : F‚ÇÅ.obj ((dœÄ‚Çò i‚ÇÅ).obj ‚ü®x, hx‚ÇÄ‚ü©) = F‚ÇÇ.obj ((dœÄ‚Çò i‚ÇÇ).obj ‚ü®x, hx‚ÇÄ‚ü©) :=
      show ((dœÄ‚Çò i‚ÇÅ) ‚ãô F‚ÇÅ).obj ‚ü®x, hx‚ÇÄ‚ü© = ((dœÄ‚Çò i‚ÇÇ) ‚ãô F‚ÇÇ).obj ‚ü®x, hx‚ÇÄ‚ü© by rw [h_comm]

    have : F‚ÇÅ.obj ‚ü®x, hx‚ÇÅ‚ü© = F‚ÇÇ.obj (‚ü®x, hx‚ÇÇ‚ü©) :=
      calc F‚ÇÅ.obj ‚ü®x, hx‚ÇÅ‚ü©
        _ = F‚ÇÅ.obj ((dœÄ‚Çò i‚ÇÅ).obj ‚ü®x, hx‚ÇÄ‚ü©) := rfl
        _ = F‚ÇÇ.obj ((dœÄ‚Çò i‚ÇÇ).obj ‚ü®x, hx‚ÇÄ‚ü©) := this
        _ = F‚ÇÇ.obj (‚ü®x, hx‚ÇÇ‚ü©) := rfl

    rw [this.symm]
    convert (dif_pos hx‚ÇÅ).symm using 1; rfl
  case neg =>
    convert (dif_neg hx‚ÇÅ).symm using 1; rfl

/- ### Functor on Maps -/

/-
  Define the mapping behaviour on paths that are fully covered by one set
-/
def FunctorOnHomOfCoveredAux‚ÇÅ {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÅ) :
    F_obj ‚ü®x‚ü© ‚ü∂ F_obj ‚ü®y‚ü© :=
  (eqToHom (functor_obj_apply_one hX h_comm (source_elt_of_image_subset hŒ≥)).symm) ‚â´
  (F‚ÇÅ.map ‚ü¶SubtypeDipath Œ≥ hŒ≥‚üß) ‚â´
  (eqToHom (functor_obj_apply_one hX h_comm (target_elt_of_image_subset hŒ≥)))

def FunctorOnHomOfCoveredAux‚ÇÇ {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÇ) :
    F_obj ‚ü®x‚ü© ‚ü∂ F_obj ‚ü®y‚ü© :=
  (eqToHom (functor_obj_apply_two hX h_comm (source_elt_of_image_subset hŒ≥)).symm) ‚â´
  (F‚ÇÇ.map ‚ü¶SubtypeDipath Œ≥ hŒ≥‚üß) ‚â´
  (eqToHom (functor_obj_apply_two hX h_comm (target_elt_of_image_subset hŒ≥)))

/-
  Show that these maps respect composition of paths
-/
lemma functorOnHomOfCoveredAux‚ÇÅ_trans {x y z : X} {Œ≥‚ÇÅ : Dipath x y} {Œ≥‚ÇÇ : Dipath y z} (hŒ≥ : range (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) ‚äÜ X‚ÇÅ) :
    FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm hŒ≥ =
      FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm (subsets_of_trans_subset hŒ≥).1
      ‚â´ FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm (subsets_of_trans_subset hŒ≥).2 := by
  unfold FunctorOnHomOfCoveredAux‚ÇÅ
  rw [(subset_functor_trans hŒ≥).symm]
  simp

lemma functorOnHomOfCoveredAux‚ÇÇ_trans {x y z : X} {Œ≥‚ÇÅ : Dipath x y} {Œ≥‚ÇÇ : Dipath y z} (hŒ≥ : range (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) ‚äÜ X‚ÇÇ) :
    FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm hŒ≥ =
      FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm (subsets_of_trans_subset hŒ≥).1
      ‚â´ FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm (subsets_of_trans_subset hŒ≥).2 := by
  unfold FunctorOnHomOfCoveredAux‚ÇÇ
  rw [(subset_functor_trans hŒ≥).symm]
  simp

/-
 Show that the maps respect reparametrization of paths
-/
lemma functorOnHomOfCoveredAux‚ÇÅ_reparam {x y : X} {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÅ)
  {f : D(I, I)} (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
    FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm hŒ≥ = FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm (reparam_subset_of_subset hŒ≥ hf‚ÇÄ hf‚ÇÅ) := by
  unfold FunctorOnHomOfCoveredAux‚ÇÅ
  rw [subset_functor_reparam hŒ≥ hf‚ÇÄ hf‚ÇÅ]

lemma functorOnHomOfCoveredAux‚ÇÇ_reparam {x y : X} {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÇ)
  {f : D(I, I)} (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
    FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm hŒ≥ = FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm (reparam_subset_of_subset hŒ≥ hf‚ÇÄ hf‚ÇÅ) := by
  unfold FunctorOnHomOfCoveredAux‚ÇÇ
  rw [subset_functor_reparam hŒ≥ hf‚ÇÄ hf‚ÇÅ]

/-
 Show that the maps respect reparametrization of paths
-/
lemma functorOnHomOfCoveredAux‚ÇÅ_refl {x : X} (hx : x ‚àà X‚ÇÅ) :
  FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm (range_refl_subset_of_mem hx) = ùüô (F_obj ‚ü®x‚ü©) := by
  unfold FunctorOnHomOfCoveredAux‚ÇÅ
  rw [subtype_refl, ‚Üêid_eq_path_refl, F‚ÇÅ.map_id]
  simp

lemma functorOnHomOfCoveredAux‚ÇÇ_refl {x : X} (hx : x ‚àà X‚ÇÇ) :
  FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm (range_refl_subset_of_mem hx) = ùüô (F_obj ‚ü®x‚ü©) := by
  unfold FunctorOnHomOfCoveredAux‚ÇÇ
  rw [subtype_refl, ‚Üêid_eq_path_refl, F‚ÇÇ.map_id]
  simp

/-
  Show that for any path living in X‚ÇÅ ‚à© X‚ÇÇ, it does not matter whether we apply the first or second map
-/
lemma functorOnHomOfCoveredAux_equal {Œ≥ : Dipath x y} (hŒ≥‚ÇÅ : range Œ≥ ‚äÜ X‚ÇÅ) (hŒ≥‚ÇÇ : range Œ≥ ‚äÜ X‚ÇÇ) :
    FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm hŒ≥‚ÇÅ = FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm hŒ≥‚ÇÇ := by
  unfold FunctorOnHomOfCoveredAux‚ÇÅ FunctorOnHomOfCoveredAux‚ÇÇ
  have hŒ≥‚ÇÄ : range Œ≥ ‚äÜ X‚ÇÅ ‚à© X‚ÇÇ := subset_inter hŒ≥‚ÇÅ hŒ≥‚ÇÇ
  apply (eqToHom_comp_iff _ _ _).mpr
  apply (comp_eqToHom_iff _ _ _).mpr
  simp
  exact map_eq_map_of_eq h_comm ‚ü¶SubtypeDipath Œ≥ hŒ≥‚ÇÄ‚üß

/-
- ### Define the mapping behaviour on covered paths
-/
def FunctorOnHomOfCovered {Œ≥ : Dipath x y} (hŒ≥ : covered hX Œ≥) :
    F_obj ‚ü®x‚ü© ‚ü∂ F_obj ‚ü®y‚ü© :=
  Or.by_cases hŒ≥
    (fun hŒ≥ => FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm hŒ≥)
    (fun hŒ≥ => FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm hŒ≥)

local notation "F‚ÇÄ" => FunctorOnHomOfCovered hX h_comm

section FunctorOnHomOfCoveredProperties

lemma functorOnHomOfCovered_apply_left {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÅ) :
    F‚ÇÄ (Or.inl hŒ≥) = FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm hŒ≥ := dif_pos hŒ≥

lemma functorOnHomOfCovered_apply_left' {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÅ) :
    F‚ÇÄ (covered_partwise_of_covered 0 (Or.inl hŒ≥)) = FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm hŒ≥ :=
  functorOnHomOfCovered_apply_left _ _ _

lemma functorOnHomOfCovered_apply_right {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÇ) :
    F‚ÇÄ (Or.inr hŒ≥) = FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm hŒ≥ := by
  by_cases hŒ≥‚ÇÅ : range Œ≥ ‚äÜ X‚ÇÅ
  ¬∑ rw [functorOnHomOfCovered_apply_left hX h_comm hŒ≥‚ÇÅ]
    exact functorOnHomOfCoveredAux_equal hX h_comm hŒ≥‚ÇÅ hŒ≥
  ¬∑ apply dif_neg hŒ≥‚ÇÅ

lemma functorOnHomOfCovered_equal {Œ≥‚ÇÅ Œ≥‚ÇÇ : Dipath x y} (h : Œ≥‚ÇÅ = Œ≥‚ÇÇ) (hŒ≥‚ÇÅ : covered hX Œ≥‚ÇÅ) (hŒ≥‚ÇÇ : covered hX Œ≥‚ÇÇ) :
    F‚ÇÄ hŒ≥‚ÇÅ = F‚ÇÄ hŒ≥‚ÇÇ := by subst_vars; rfl

lemma functorOnHomOfCovered_refl : F‚ÇÄ (covered_refl x hX) = ùüô (F_obj ‚ü®x‚ü©) := by
  cases ((Set.mem_union x X‚ÇÅ X‚ÇÇ).mp (Filter.mem_top.mpr hX x))
  case inl hx‚ÇÅ =>
    rw [‚ÜêfunctorOnHomOfCoveredAux‚ÇÅ_refl hX h_comm hx‚ÇÅ]
    exact functorOnHomOfCovered_apply_left hX h_comm (DiSubtype.range_refl_subset_of_mem hx‚ÇÅ)
  case inr hx‚ÇÇ =>
    rw [‚ÜêfunctorOnHomOfCoveredAux‚ÇÇ_refl hX h_comm hx‚ÇÇ]
    exact functorOnHomOfCovered_apply_right hX h_comm (DiSubtype.range_refl_subset_of_mem hx‚ÇÇ)

lemma functorOnHomOfCovered_apply_right' {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÇ) :
    F‚ÇÄ (covered_partwise_of_covered 0 (Or.inr hŒ≥)) = FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm hŒ≥ :=
  functorOnHomOfCovered_apply_right _ _ _

lemma functorOnHomOfCovered_trans {x y z : X} {Œ≥‚ÇÅ : Dipath x y} {Œ≥‚ÇÇ : Dipath y z} (hŒ≥ : covered hX (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ)) :
    F‚ÇÄ hŒ≥ = (F‚ÇÄ (covered_of_covered_trans hŒ≥).1) ‚â´ (F‚ÇÄ (covered_of_covered_trans hŒ≥).2) := by
  cases hŒ≥
  case inl hŒ≥ => -- Œ≥ is covered by X‚ÇÅ
    rw [functorOnHomOfCovered_apply_left _ _ hŒ≥]
    rw [functorOnHomOfCoveredAux‚ÇÅ_trans]
    congr
    ¬∑ exact (functorOnHomOfCovered_apply_left _ _ _).symm
    ¬∑ exact (functorOnHomOfCovered_apply_left _ _ _).symm
  case inr hŒ≥ => -- Œ≥ is covered by X‚ÇÇ
    rw [functorOnHomOfCovered_apply_right _ _ hŒ≥]
    rw [functorOnHomOfCoveredAux‚ÇÇ_trans]
    congr
    exact (functorOnHomOfCovered_apply_right _ _ (subsets_of_trans_subset hŒ≥).1).symm
    exact (functorOnHomOfCovered_apply_right _ _ (subsets_of_trans_subset hŒ≥).2).symm

lemma functorOnHomOfCovered_reparam {x y : X} {Œ≥ : Dipath x y} (hŒ≥ : covered hX Œ≥)
  {f : D(I, I)} (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
    F‚ÇÄ hŒ≥ = F‚ÇÄ ((covered_reparam_iff Œ≥ hX f hf‚ÇÄ hf‚ÇÅ).mp hŒ≥) := by
  cases hŒ≥
  case inl hŒ≥ =>
    have : range (Œ≥.reparam f hf‚ÇÄ hf‚ÇÅ) ‚äÜ X‚ÇÅ := by rw [Dipath.range_reparam Œ≥ f hf‚ÇÄ hf‚ÇÅ]; exact hŒ≥
    rw [functorOnHomOfCovered_apply_left]
    rw [functorOnHomOfCoveredAux‚ÇÅ_reparam hX h_comm hŒ≥ hf‚ÇÄ hf‚ÇÅ]
    rw [‚ÜêfunctorOnHomOfCovered_apply_left hX h_comm this]
  case inr hŒ≥ =>
    have : range (Œ≥.reparam f hf‚ÇÄ hf‚ÇÅ) ‚äÜ X‚ÇÇ := by rw [Dipath.range_reparam Œ≥ f hf‚ÇÄ hf‚ÇÅ]; exact hŒ≥
    rw [functorOnHomOfCovered_apply_right]
    rw [functorOnHomOfCoveredAux‚ÇÇ_reparam hX h_comm hŒ≥ hf‚ÇÄ hf‚ÇÅ]
    rw [‚ÜêfunctorOnHomOfCovered_apply_right hX h_comm this]

lemma functorOnHomOfCovered_cast {x y x' y' : X} {Œ≥ : Dipath x y} (hŒ≥ : covered hX Œ≥) (hx : x' = x) (hy : y' = y) :
    F‚ÇÄ ((covered_cast_iff Œ≥ hX hx hy).mp hŒ≥) = (eqToHom (show F_obj ‚ü®x'‚ü© = F_obj ‚ü®x‚ü© by rw [hx])) ‚â´
      (F‚ÇÄ hŒ≥) ‚â´ (eqToHom (show F_obj ‚ü®y‚ü© = F_obj ‚ü®y'‚ü© by rw [hy])) := by
  subst_vars
  rw [eqToHom_refl, eqToHom_refl, Category.comp_id, Category.id_comp]

lemma functorOnHomOfCovered_cast_left {x y x' : X} {Œ≥ : Dipath x y} (hŒ≥ : covered hX Œ≥) (hx : x' = x) :
    F‚ÇÄ ((covered_cast_iff Œ≥ hX hx rfl).mp hŒ≥) =
      (eqToHom (show F_obj ‚ü®x'‚ü© = F_obj ‚ü®x‚ü© by rw [hx])) ‚â´ (F‚ÇÄ hŒ≥) := by
  subst_vars
  rw [eqToHom_refl, Category.id_comp]

lemma functorOnHomOfCovered_cast_right {x y y' : X} {Œ≥ : Dipath x y} (hŒ≥ : covered hX Œ≥) (hy : y' = y) :
  F‚ÇÄ ((covered_cast_iff Œ≥ hX rfl hy).mp hŒ≥) =
    (F‚ÇÄ hŒ≥) ‚â´ (eqToHom (show F_obj ‚ü®y‚ü© = F_obj ‚ü®y'‚ü© by rw [hy])) := by
  subst_vars
  rw [eqToHom_refl, Category.comp_id]

lemma functorOnHomOfCovered_split_comp {x y : X} {Œ≥ : Dipath x y} (hŒ≥ : covered hX Œ≥) {T : I} (hT‚ÇÄ : 0 < T) (hT‚ÇÅ : T < 1) :
    F‚ÇÄ hŒ≥ = (F‚ÇÄ (covered_split_path hT‚ÇÄ hT‚ÇÅ hŒ≥).1) ‚â´ (F‚ÇÄ (covered_split_path hT‚ÇÄ hT‚ÇÅ hŒ≥).2) := by
  have : covered hX ((SplitDipath.FirstPartDipath Œ≥ T).trans (SplitDipath.SecondPartDipath Œ≥ T)) := by
    rw [SplitDipath.first_trans_second_reparam_eq_self Œ≥ hT‚ÇÄ hT‚ÇÅ] at hŒ≥
    exact (covered_reparam_iff _ hX _ _ _).mpr hŒ≥

  rw [‚ÜêfunctorOnHomOfCovered_trans hX h_comm this]
  rw [functorOnHomOfCovered_reparam hX h_comm this
      (SplitDipath.trans_reparam_map_zero hT‚ÇÄ hT‚ÇÅ)
      (SplitDipath.trans_reparam_map_one hT‚ÇÄ hT‚ÇÅ)]
  congr
  apply SplitDipath.first_trans_second_reparam_eq_self

lemma functorOnHomOfCovered_dihomotopic {x y : X} {Œ≥ Œ≥' : Dipath x y} {F : Dihomotopy Œ≥ Œ≥'}
  (hF : Dipath.Dihomotopy.covered hX F) :
    F‚ÇÄ (Dipath.Dihomotopy.covered_left_of_covered hF) = F‚ÇÄ (Dipath.Dihomotopy.covered_right_of_covered hF) := by
  cases hF
  case inl hF =>
    have hŒ≥ := subset_trans (Dipath.Dihomotopy.range_left_subset F) hF
    have hŒ≥' := subset_trans (Dipath.Dihomotopy.range_right_subset F) hF
    rw [functorOnHomOfCovered_equal hX h_comm rfl _ (Or.inl hŒ≥)]
    rw [functorOnHomOfCovered_equal hX h_comm rfl _ (Or.inl hŒ≥')]
    rw [functorOnHomOfCovered_apply_left hX h_comm hŒ≥]
    rw [functorOnHomOfCovered_apply_left hX h_comm hŒ≥']
    unfold FunctorOnHomOfCoveredAux‚ÇÅ
    rw [dihomSubtype_of_dihom_range_subset hŒ≥ hŒ≥' hF]
  case inr hF =>
    have hŒ≥ := subset_trans (Dipath.Dihomotopy.range_left_subset F) hF
    have hŒ≥' := subset_trans (Dipath.Dihomotopy.range_right_subset F) hF
    rw [functorOnHomOfCovered_equal hX h_comm rfl _ (Or.inr hŒ≥)]
    rw [functorOnHomOfCovered_equal hX h_comm rfl _ (Or.inr hŒ≥')]
    rw [functorOnHomOfCovered_apply_right hX h_comm hŒ≥]
    rw [functorOnHomOfCovered_apply_right hX h_comm hŒ≥']
    unfold FunctorOnHomOfCoveredAux‚ÇÇ
    rw [dihomSubtype_of_dihom_range_subset hŒ≥ hŒ≥' hF]

end FunctorOnHomOfCoveredProperties


end PushoutFunctor

end DirectedVanKampen
