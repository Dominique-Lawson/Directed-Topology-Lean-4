import Mathlib.CategoryTheory.Limits.Shapes.CommSq
import Lean4.dihomotopy_cover
import Lean4.pushout_alternative
import Lean4.dihomotopy_to_path_dihomotopy
import Lean4.morphism_aux

/-
  This file contains the directed version of the Van Kampen Theorem.
  The statement is as follows:
  Let `X : dTopCat` and `X‚ÇÅ X‚ÇÇ : Set X` such that `X‚ÇÅ` and `X‚ÇÇ` are both open and `X‚ÇÅ ‚à™ X‚ÇÇ = X`.
  Let `i‚ÇÅ : X‚ÇÅ ‚à© X‚ÇÇ ‚Üí X‚ÇÅ`, `i‚ÇÇ : X‚ÇÅ ‚à© X‚ÇÇ ‚Üí X‚ÇÇ`, `j‚ÇÅ : X‚ÇÅ ‚Üí X` and `j‚ÇÇ : X‚ÇÇ ‚Üí X` be the inclusion maps in `dTopCat`.
  Then we have a pushout in `Cat`:
  dœÄ‚Çì(X‚ÇÅ ‚à© X‚ÇÇ) ------ dœÄ‚Çò i‚ÇÅ -----> dœÄ‚Çì(X‚ÇÅ)
       |                              |
       |                              |
       |                              |
     dœÄ‚Çò i‚ÇÇ                         dœÄ‚Çò j‚ÇÅ
       |                              |
       |                              |
       |                              |
    dœÄ‚Çì(X‚ÇÇ) ------- dœÄ‚Çò j‚ÇÇ ------> dœÄ‚Çì(X)

  The proof we give is constructive and is based on the proof given by
  Marco Grandis, Directed Homotopy Theory I, published in Cahiers de topologie et g√©om√©trie diff√©rentielle cat√©goriques, 44, no 4, pages 307-309, 2003.
-/

universe u v

open Set
open scoped unitInterval Classical FundamentalCategory

attribute [local instance] Dipath.Dihomotopic.setoid

noncomputable section

namespace DirectedVanKampen

open FundamentalCategory DiSubtype CategoryTheory

variable {X : dTopCat.{u}} {X‚ÇÅ X‚ÇÇ : Set X}
variable (hX : X‚ÇÅ ‚à™ X‚ÇÇ = Set.univ)
variable (X‚ÇÅ_open : IsOpen X‚ÇÅ) (X‚ÇÇ_open : IsOpen X‚ÇÇ)

-- We will use a shorthand notation for the 4 morphisms in dTop:
-- i‚ÇÅ : X‚ÇÅ ‚à© X‚ÇÇ ‚ü∂ X‚ÇÅ
local notation "i‚ÇÅ" => dTopCat.DirectedSubsetHom $ (Set.inter_subset_left X‚ÇÅ X‚ÇÇ)
-- i‚ÇÅ : X‚ÇÅ ‚à© X‚ÇÇ ‚ü∂ X‚ÇÇ
local notation "i‚ÇÇ" => dTopCat.DirectedSubsetHom $ (Set.inter_subset_right X‚ÇÅ X‚ÇÇ)
-- j‚ÇÅ : X‚ÇÅ ‚ü∂ X
local notation "j‚ÇÅ" => dTopCat.DirectedSubtypeHom X‚ÇÅ
-- j‚ÇÇ : X‚ÇÇ ‚ü∂ X
local notation "j‚ÇÇ" => dTopCat.DirectedSubtypeHom X‚ÇÇ

namespace PushoutFunctor

open Dipath Dipath.covered Dipath.covered_partwise

variable {x y : X} {C : CategoryTheory.Cat.{u, u}}
variable (F‚ÇÅ : (dœÄ‚Çì (dTopCat.of X‚ÇÅ) ‚ü∂ C)) (F‚ÇÇ : (dœÄ‚Çì (dTopCat.of X‚ÇÇ) ‚ü∂ C))
variable (h_comm : (dœÄ‚Çò (dTopCat.DirectedSubsetHom $ (Set.inter_subset_left X‚ÇÅ X‚ÇÇ))) ‚ãô F‚ÇÅ =
                  ((dœÄ‚Çò (dTopCat.DirectedSubsetHom $ (Set.inter_subset_right X‚ÇÅ X‚ÇÇ))) ‚ãô F‚ÇÇ))

section FunctorProps

open CategoryTheory

variable {Y : dTopCat.{u}} {Y‚ÇÄ : Set Y} {F : dœÄ‚Çì (dTopCat.of Y‚ÇÄ) ‚•§ C}

lemma subset_functor_trans {x y z : Y} {Œ≥‚ÇÅ : Dipath x y} {Œ≥‚ÇÇ : Dipath y z} (hŒ≥ : range (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) ‚äÜ Y‚ÇÄ) :
    (F.map ‚ü¶SubtypeDipath Œ≥‚ÇÅ (subsets_of_trans_subset hŒ≥).1‚üß ‚â´ F.map ‚ü¶SubtypeDipath Œ≥‚ÇÇ (subsets_of_trans_subset hŒ≥).2‚üß) =
      F.map ‚ü¶SubtypeDipath (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) hŒ≥‚üß := by
  rw [‚Üêsubtype_trans hŒ≥, Dipath.Dihomotopic.comp_lift]
  exact (F.map_comp _ _).symm

lemma subset_functor_reparam {x y : Y} {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ Y‚ÇÄ) {f : D(I, I)} (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
    F.map ‚ü¶SubtypeDipath (Œ≥.reparam f hf‚ÇÄ hf‚ÇÅ)
        (show range (Œ≥.reparam f hf‚ÇÄ hf‚ÇÅ) ‚äÜ Y‚ÇÄ by exact (Dipath.range_reparam Œ≥ f hf‚ÇÄ hf‚ÇÅ).symm ‚ñ∏ hŒ≥)‚üß =
        F.map ‚ü¶SubtypeDipath Œ≥ hŒ≥‚üß := by
  congr 1
  rw [subtype_reparam hŒ≥ hf‚ÇÄ hf‚ÇÅ]
  symm
  exact Quotient.eq.mpr (Dipath.Dihomotopic.reparam (SubtypeDipath Œ≥ hŒ≥) f hf‚ÇÄ hf‚ÇÅ)

lemma functor_cast {X : dTopCat} (F : (dœÄ‚Çì X) ‚•§ C) {x y x' y' : X} (Œ≥ : Dipath x y) (hx : x' = x) (hy : y' = y) :
    F.map ‚ü¶Œ≥.cast hx hy‚üß =
      (eqToHom (congrArg F.obj (congrArg FundamentalCategory.mk hx))) ‚â´ F.map ‚ü¶Œ≥‚üß ‚â´
      (eqToHom (congrArg F.obj (congrArg FundamentalCategory.mk hy)).symm) := by
  subst_vars
  simp
  congr 2

end FunctorProps

/-
  Given a category C and functors F‚ÇÅ : dœÄ‚Çì X‚ÇÅ ‚•§ C and F‚ÇÇ : dœÄ‚Çì X‚ÇÇ ‚•§ C, we will construct a functor F : dœÄ‚Çì X ‚•§ C
-/

/- ### Functor on Objects -/

/-
- Define the behaviour on objects
-/
def FunctorOnObj (x : dœÄ‚Çì X) : C :=
  Or.by_cases
    ((Set.mem_union x.as X‚ÇÅ X‚ÇÇ).mp (Filter.mem_top.mpr hX x.as))
      (fun hx => F‚ÇÅ.obj ‚ü®x.as, hx‚ü©)
      (fun hx => F‚ÇÇ.obj ‚ü®x.as, hx‚ü©)

-- We will use the shorhand notation F_obj
local notation "F_obj" => FunctorOnObj hX F‚ÇÅ F‚ÇÇ

/-
  Under the assumption that the square commutes, we can show how the functor behaves on objects
-/

variable {F‚ÇÅ F‚ÇÇ}

lemma functorOnObj_apply_one {x : X} (hx : x ‚àà X‚ÇÅ) : F‚ÇÅ.obj ‚ü®x, hx‚ü© = F_obj ‚ü®x‚ü© := by
  have := h_comm
  convert (dif_pos hx).symm using 1
  rfl

lemma functorOnObj_apply_two {x : X} (hx‚ÇÇ : x ‚àà X‚ÇÇ) : F‚ÇÇ.obj ‚ü®x, hx‚ÇÇ‚ü© = F_obj ‚ü®x‚ü© := by
  by_cases hx‚ÇÅ : x ‚àà X‚ÇÅ
  case pos =>
    have hx‚ÇÄ : x ‚àà X‚ÇÅ ‚à© X‚ÇÇ := ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©
    have : F‚ÇÅ.obj ((dœÄ‚Çò i‚ÇÅ).obj ‚ü®x, hx‚ÇÄ‚ü©) = F‚ÇÇ.obj ((dœÄ‚Çò i‚ÇÇ).obj ‚ü®x, hx‚ÇÄ‚ü©) :=
      show ((dœÄ‚Çò i‚ÇÅ) ‚ãô F‚ÇÅ).obj ‚ü®x, hx‚ÇÄ‚ü© = ((dœÄ‚Çò i‚ÇÇ) ‚ãô F‚ÇÇ).obj ‚ü®x, hx‚ÇÄ‚ü© by rw [h_comm]

    have : F‚ÇÅ.obj ‚ü®x, hx‚ÇÅ‚ü© = F‚ÇÇ.obj (‚ü®x, hx‚ÇÇ‚ü©) :=
      calc F‚ÇÅ.obj ‚ü®x, hx‚ÇÅ‚ü©
        _ = F‚ÇÅ.obj ((dœÄ‚Çò i‚ÇÅ).obj ‚ü®x, hx‚ÇÄ‚ü©) := rfl
        _ = F‚ÇÇ.obj ((dœÄ‚Çò i‚ÇÇ).obj ‚ü®x, hx‚ÇÄ‚ü©) := this
        _ = F‚ÇÇ.obj (‚ü®x, hx‚ÇÇ‚ü©) := rfl

    rw [this.symm]
    convert (dif_pos hx‚ÇÅ).symm using 1; rfl
  case neg =>
    convert (dif_neg hx‚ÇÅ).symm using 1; rfl

/- ### Functor on Maps -/

/-
  Define the mapping behaviour on paths that are fully covered by one set
-/
def FunctorOnHomOfCoveredAux‚ÇÅ {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÅ) :
    F_obj ‚ü®x‚ü© ‚ü∂ F_obj ‚ü®y‚ü© :=
  (eqToHom (functorOnObj_apply_one hX h_comm (source_elt_of_image_subset hŒ≥)).symm) ‚â´
  (F‚ÇÅ.map ‚ü¶SubtypeDipath Œ≥ hŒ≥‚üß) ‚â´
  (eqToHom (functorOnObj_apply_one hX h_comm (target_elt_of_image_subset hŒ≥)))

def FunctorOnHomOfCoveredAux‚ÇÇ {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÇ) :
    F_obj ‚ü®x‚ü© ‚ü∂ F_obj ‚ü®y‚ü© :=
  (eqToHom (functorOnObj_apply_two hX h_comm (source_elt_of_image_subset hŒ≥)).symm) ‚â´
  (F‚ÇÇ.map ‚ü¶SubtypeDipath Œ≥ hŒ≥‚üß) ‚â´
  (eqToHom (functorOnObj_apply_two hX h_comm (target_elt_of_image_subset hŒ≥)))

/-
  Show that these maps respect composition of paths
-/
lemma functorOnHomOfCoveredAux‚ÇÅ_trans {x y z : X} {Œ≥‚ÇÅ : Dipath x y} {Œ≥‚ÇÇ : Dipath y z} (hŒ≥ : range (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) ‚äÜ X‚ÇÅ) :
    FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm hŒ≥ =
      FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm (subsets_of_trans_subset hŒ≥).1
      ‚â´ FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm (subsets_of_trans_subset hŒ≥).2 := by
  unfold FunctorOnHomOfCoveredAux‚ÇÅ
  rw [(subset_functor_trans hŒ≥).symm]
  simp

lemma functorOnHomOfCoveredAux‚ÇÇ_trans {x y z : X} {Œ≥‚ÇÅ : Dipath x y} {Œ≥‚ÇÇ : Dipath y z} (hŒ≥ : range (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) ‚äÜ X‚ÇÇ) :
    FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm hŒ≥ =
      FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm (subsets_of_trans_subset hŒ≥).1
      ‚â´ FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm (subsets_of_trans_subset hŒ≥).2 := by
  unfold FunctorOnHomOfCoveredAux‚ÇÇ
  rw [(subset_functor_trans hŒ≥).symm]
  simp

/-
 Show that the maps respect reparametrization of paths
-/
lemma functorOnHomOfCoveredAux‚ÇÅ_reparam {x y : X} {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÅ)
  {f : D(I, I)} (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
    FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm hŒ≥ = FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm (reparam_subset_of_subset hŒ≥ hf‚ÇÄ hf‚ÇÅ) := by
  unfold FunctorOnHomOfCoveredAux‚ÇÅ
  rw [subset_functor_reparam hŒ≥ hf‚ÇÄ hf‚ÇÅ]

lemma functorOnHomOfCoveredAux‚ÇÇ_reparam {x y : X} {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÇ)
  {f : D(I, I)} (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
    FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm hŒ≥ = FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm (reparam_subset_of_subset hŒ≥ hf‚ÇÄ hf‚ÇÅ) := by
  unfold FunctorOnHomOfCoveredAux‚ÇÇ
  rw [subset_functor_reparam hŒ≥ hf‚ÇÄ hf‚ÇÅ]

/-
 Show that the maps respect reparametrization of paths
-/
lemma functorOnHomOfCoveredAux‚ÇÅ_refl {x : X} (hx : x ‚àà X‚ÇÅ) :
  FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm (range_refl_subset_of_mem hx) = ùüô (F_obj ‚ü®x‚ü©) := by
  unfold FunctorOnHomOfCoveredAux‚ÇÅ
  rw [subtype_refl, ‚Üêid_eq_path_refl, F‚ÇÅ.map_id]
  simp

lemma functorOnHomOfCoveredAux‚ÇÇ_refl {x : X} (hx : x ‚àà X‚ÇÇ) :
  FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm (range_refl_subset_of_mem hx) = ùüô (F_obj ‚ü®x‚ü©) := by
  unfold FunctorOnHomOfCoveredAux‚ÇÇ
  rw [subtype_refl, ‚Üêid_eq_path_refl, F‚ÇÇ.map_id]
  simp

/-
  Show that for any path living in X‚ÇÅ ‚à© X‚ÇÇ, it does not matter whether we apply the first or second map
-/
lemma functorOnHomOfCoveredAux_equal {Œ≥ : Dipath x y} (hŒ≥‚ÇÅ : range Œ≥ ‚äÜ X‚ÇÅ) (hŒ≥‚ÇÇ : range Œ≥ ‚äÜ X‚ÇÇ) :
    FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm hŒ≥‚ÇÅ = FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm hŒ≥‚ÇÇ := by
  unfold FunctorOnHomOfCoveredAux‚ÇÅ FunctorOnHomOfCoveredAux‚ÇÇ
  have hŒ≥‚ÇÄ : range Œ≥ ‚äÜ X‚ÇÅ ‚à© X‚ÇÇ := subset_inter hŒ≥‚ÇÅ hŒ≥‚ÇÇ
  apply (eqToHom_comp_iff _ _ _).mpr
  apply (comp_eqToHom_iff _ _ _).mpr
  simp
  exact map_eq_map_of_eq h_comm ‚ü¶SubtypeDipath Œ≥ hŒ≥‚ÇÄ‚üß

/-
- ### Define the mapping behaviour on covered paths
-/
def FunctorOnHomOfCovered {Œ≥ : Dipath x y} (hŒ≥ : covered hX Œ≥) :
    F_obj ‚ü®x‚ü© ‚ü∂ F_obj ‚ü®y‚ü© :=
  Or.by_cases hŒ≥
    (fun hŒ≥ => FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm hŒ≥)
    (fun hŒ≥ => FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm hŒ≥)

local notation "F‚ÇÄ" => FunctorOnHomOfCovered hX h_comm

section FunctorOnHomOfCoveredProperties

lemma functorOnHomOfCovered_apply_left {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÅ) :
    F‚ÇÄ (Or.inl hŒ≥) = FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm hŒ≥ := dif_pos hŒ≥

lemma functorOnHomOfCovered_apply_left' {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÅ) :
    F‚ÇÄ (covered_partwise_of_covered 0 (Or.inl hŒ≥)) = FunctorOnHomOfCoveredAux‚ÇÅ hX h_comm hŒ≥ :=
  functorOnHomOfCovered_apply_left _ _ _

lemma functorOnHomOfCovered_apply_right {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÇ) :
    F‚ÇÄ (Or.inr hŒ≥) = FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm hŒ≥ := by
  by_cases hŒ≥‚ÇÅ : range Œ≥ ‚äÜ X‚ÇÅ
  ¬∑ rw [functorOnHomOfCovered_apply_left hX h_comm hŒ≥‚ÇÅ]
    exact functorOnHomOfCoveredAux_equal hX h_comm hŒ≥‚ÇÅ hŒ≥
  ¬∑ apply dif_neg hŒ≥‚ÇÅ

lemma functorOnHomOfCovered_equal {Œ≥‚ÇÅ Œ≥‚ÇÇ : Dipath x y} (h : Œ≥‚ÇÅ = Œ≥‚ÇÇ) (hŒ≥‚ÇÅ : covered hX Œ≥‚ÇÅ) (hŒ≥‚ÇÇ : covered hX Œ≥‚ÇÇ) :
    F‚ÇÄ hŒ≥‚ÇÅ = F‚ÇÄ hŒ≥‚ÇÇ := by subst_vars; rfl

lemma functorOnHomOfCovered_refl : F‚ÇÄ (covered_refl x hX) = ùüô (F_obj ‚ü®x‚ü©) := by
  cases ((Set.mem_union x X‚ÇÅ X‚ÇÇ).mp (Filter.mem_top.mpr hX x))
  case inl hx‚ÇÅ =>
    rw [‚ÜêfunctorOnHomOfCoveredAux‚ÇÅ_refl hX h_comm hx‚ÇÅ]
    exact functorOnHomOfCovered_apply_left hX h_comm (DiSubtype.range_refl_subset_of_mem hx‚ÇÅ)
  case inr hx‚ÇÇ =>
    rw [‚ÜêfunctorOnHomOfCoveredAux‚ÇÇ_refl hX h_comm hx‚ÇÇ]
    exact functorOnHomOfCovered_apply_right hX h_comm (DiSubtype.range_refl_subset_of_mem hx‚ÇÇ)

lemma functorOnHomOfCovered_apply_right' {Œ≥ : Dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÇ) :
    F‚ÇÄ (covered_partwise_of_covered 0 (Or.inr hŒ≥)) = FunctorOnHomOfCoveredAux‚ÇÇ hX h_comm hŒ≥ :=
  functorOnHomOfCovered_apply_right _ _ _

lemma functorOnHomOfCovered_trans {x y z : X} {Œ≥‚ÇÅ : Dipath x y} {Œ≥‚ÇÇ : Dipath y z} (hŒ≥ : covered hX (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ)) :
    F‚ÇÄ hŒ≥ = (F‚ÇÄ (covered_of_covered_trans hŒ≥).1) ‚â´ (F‚ÇÄ (covered_of_covered_trans hŒ≥).2) := by
  cases hŒ≥
  case inl hŒ≥ => -- Œ≥ is covered by X‚ÇÅ
    rw [functorOnHomOfCovered_apply_left _ _ hŒ≥]
    rw [functorOnHomOfCoveredAux‚ÇÅ_trans]
    congr
    ¬∑ exact (functorOnHomOfCovered_apply_left _ _ _).symm
    ¬∑ exact (functorOnHomOfCovered_apply_left _ _ _).symm
  case inr hŒ≥ => -- Œ≥ is covered by X‚ÇÇ
    rw [functorOnHomOfCovered_apply_right _ _ hŒ≥]
    rw [functorOnHomOfCoveredAux‚ÇÇ_trans]
    congr
    exact (functorOnHomOfCovered_apply_right _ _ (subsets_of_trans_subset hŒ≥).1).symm
    exact (functorOnHomOfCovered_apply_right _ _ (subsets_of_trans_subset hŒ≥).2).symm

lemma functorOnHomOfCovered_reparam {x y : X} {Œ≥ : Dipath x y} (hŒ≥ : covered hX Œ≥)
  {f : D(I, I)} (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
    F‚ÇÄ hŒ≥ = F‚ÇÄ ((covered_reparam_iff Œ≥ hX f hf‚ÇÄ hf‚ÇÅ).mp hŒ≥) := by
  cases hŒ≥
  case inl hŒ≥ =>
    have : range (Œ≥.reparam f hf‚ÇÄ hf‚ÇÅ) ‚äÜ X‚ÇÅ := by rw [Dipath.range_reparam Œ≥ f hf‚ÇÄ hf‚ÇÅ]; exact hŒ≥
    rw [functorOnHomOfCovered_apply_left]
    rw [functorOnHomOfCoveredAux‚ÇÅ_reparam hX h_comm hŒ≥ hf‚ÇÄ hf‚ÇÅ]
    rw [‚ÜêfunctorOnHomOfCovered_apply_left hX h_comm this]
  case inr hŒ≥ =>
    have : range (Œ≥.reparam f hf‚ÇÄ hf‚ÇÅ) ‚äÜ X‚ÇÇ := by rw [Dipath.range_reparam Œ≥ f hf‚ÇÄ hf‚ÇÅ]; exact hŒ≥
    rw [functorOnHomOfCovered_apply_right]
    rw [functorOnHomOfCoveredAux‚ÇÇ_reparam hX h_comm hŒ≥ hf‚ÇÄ hf‚ÇÅ]
    rw [‚ÜêfunctorOnHomOfCovered_apply_right hX h_comm this]

lemma functorOnHomOfCovered_cast {x y x' y' : X} {Œ≥ : Dipath x y} (hŒ≥ : covered hX Œ≥) (hx : x' = x) (hy : y' = y) :
    F‚ÇÄ ((covered_cast_iff Œ≥ hX hx hy).mp hŒ≥) = (eqToHom (show F_obj ‚ü®x'‚ü© = F_obj ‚ü®x‚ü© by rw [hx])) ‚â´
      (F‚ÇÄ hŒ≥) ‚â´ (eqToHom (show F_obj ‚ü®y‚ü© = F_obj ‚ü®y'‚ü© by rw [hy])) := by
  subst_vars
  rw [eqToHom_refl, eqToHom_refl, Category.comp_id, Category.id_comp]

lemma functorOnHomOfCovered_cast_left {x y x' : X} {Œ≥ : Dipath x y} (hŒ≥ : covered hX Œ≥) (hx : x' = x) :
    F‚ÇÄ ((covered_cast_iff Œ≥ hX hx rfl).mp hŒ≥) =
      (eqToHom (show F_obj ‚ü®x'‚ü© = F_obj ‚ü®x‚ü© by rw [hx])) ‚â´ (F‚ÇÄ hŒ≥) := by
  subst_vars
  rw [eqToHom_refl, Category.id_comp]

lemma functorOnHomOfCovered_cast_right {x y y' : X} {Œ≥ : Dipath x y} (hŒ≥ : covered hX Œ≥) (hy : y' = y) :
  F‚ÇÄ ((covered_cast_iff Œ≥ hX rfl hy).mp hŒ≥) =
    (F‚ÇÄ hŒ≥) ‚â´ (eqToHom (show F_obj ‚ü®y‚ü© = F_obj ‚ü®y'‚ü© by rw [hy])) := by
  subst_vars
  rw [eqToHom_refl, Category.comp_id]

lemma functorOnHomOfCovered_split_comp {x y : X} {Œ≥ : Dipath x y} (hŒ≥ : covered hX Œ≥) {T : I} (hT‚ÇÄ : 0 < T) (hT‚ÇÅ : T < 1) :
    F‚ÇÄ hŒ≥ = (F‚ÇÄ (covered_split_path hT‚ÇÄ hT‚ÇÅ hŒ≥).1) ‚â´ (F‚ÇÄ (covered_split_path hT‚ÇÄ hT‚ÇÅ hŒ≥).2) := by
  have : covered hX ((SplitDipath.FirstPart Œ≥ T).trans (SplitDipath.SecondPart Œ≥ T)) := by
    rw [SplitDipath.first_trans_second_reparam_eq_self Œ≥ hT‚ÇÄ hT‚ÇÅ] at hŒ≥
    exact (covered_reparam_iff _ hX _ _ _).mpr hŒ≥

  rw [‚ÜêfunctorOnHomOfCovered_trans hX h_comm this]
  rw [functorOnHomOfCovered_reparam hX h_comm this
      (SplitDipath.trans_reparam_map_zero hT‚ÇÄ hT‚ÇÅ)
      (SplitDipath.trans_reparam_map_one hT‚ÇÄ hT‚ÇÅ)]
  congr
  apply SplitDipath.first_trans_second_reparam_eq_self

lemma functorOnHomOfCovered_dihomotopic {x y : X} {Œ≥ Œ≥' : Dipath x y} {F : Dihomotopy Œ≥ Œ≥'}
  (hF : Dipath.Dihomotopy.covered hX F) :
    F‚ÇÄ (Dipath.Dihomotopy.covered_left_of_covered hF) = F‚ÇÄ (Dipath.Dihomotopy.covered_right_of_covered hF) := by
  cases hF
  case inl hF =>
    have hŒ≥ := subset_trans (Dipath.Dihomotopy.range_left_subset F) hF
    have hŒ≥' := subset_trans (Dipath.Dihomotopy.range_right_subset F) hF
    rw [functorOnHomOfCovered_equal hX h_comm rfl _ (Or.inl hŒ≥)]
    rw [functorOnHomOfCovered_equal hX h_comm rfl _ (Or.inl hŒ≥')]
    rw [functorOnHomOfCovered_apply_left hX h_comm hŒ≥]
    rw [functorOnHomOfCovered_apply_left hX h_comm hŒ≥']
    unfold FunctorOnHomOfCoveredAux‚ÇÅ
    rw [dihomSubtype_of_dihom_range_subset hŒ≥ hŒ≥' hF]
  case inr hF =>
    have hŒ≥ := subset_trans (Dipath.Dihomotopy.range_left_subset F) hF
    have hŒ≥' := subset_trans (Dipath.Dihomotopy.range_right_subset F) hF
    rw [functorOnHomOfCovered_equal hX h_comm rfl _ (Or.inr hŒ≥)]
    rw [functorOnHomOfCovered_equal hX h_comm rfl _ (Or.inr hŒ≥')]
    rw [functorOnHomOfCovered_apply_right hX h_comm hŒ≥]
    rw [functorOnHomOfCovered_apply_right hX h_comm hŒ≥']
    unfold FunctorOnHomOfCoveredAux‚ÇÇ
    rw [dihomSubtype_of_dihom_range_subset hŒ≥ hŒ≥' hF]

end FunctorOnHomOfCoveredProperties

/-
-  ### Define the behaviour on partwise covered paths
-/

def FunctorOnHomOfCoveredPartwiseAux {n : ‚Ñï} :
    ‚àÄ (x y : X) (Œ≥ : Dipath x y) (_ : covered_partwise hX Œ≥ n), F_obj ‚ü®x‚ü© ‚ü∂ F_obj ‚ü®y‚ü© :=
  Nat.recOn n
    (fun _ _ _ hŒ≥ => F‚ÇÄ hŒ≥)
    (fun _ ih _ _ _ hŒ≥ => (F‚ÇÄ hŒ≥.1) ‚â´ (ih _ _ _ hŒ≥.2))

abbrev FunctorOnHomOfCoveredPartwise {n : ‚Ñï} {x y : X} {Œ≥ : Dipath x y} (hŒ≥ : covered_partwise hX Œ≥ n) :=
  FunctorOnHomOfCoveredPartwiseAux hX h_comm x y Œ≥ hŒ≥

local notation "F‚Çô" => FunctorOnHomOfCoveredPartwise hX h_comm

lemma functorOnHomOfCoveredPartwise_apply_0 {x y : X} {Œ≥ : Dipath x y} (hŒ≥ : covered_partwise hX Œ≥ 0) :
    F‚Çô hŒ≥ = F‚ÇÄ hŒ≥ := rfl

lemma functorOnHomOfCoveredPartwise_apply_succ {n : ‚Ñï} {x y : X} {Œ≥ : Dipath x y} (hŒ≥ : covered_partwise hX Œ≥ n.succ) :
    F‚Çô hŒ≥ = (F‚ÇÄ hŒ≥.left) ‚â´ (F‚Çô hŒ≥.right) := rfl

lemma functorOnHomOfCoveredPartwise_equal {n : ‚Ñï} {Œ≥‚ÇÅ Œ≥‚ÇÇ : Dipath x y} (h : Œ≥‚ÇÅ = Œ≥‚ÇÇ)
  (hŒ≥‚ÇÅ : covered_partwise hX Œ≥‚ÇÅ n) (hŒ≥‚ÇÇ : covered_partwise hX Œ≥‚ÇÇ n) :
    F‚Çô hŒ≥‚ÇÅ = F‚Çô hŒ≥‚ÇÇ := by subst_vars; rfl

lemma functorOnHomOfCoveredPartwise_equal' {n m : ‚Ñï} {Œ≥‚ÇÅ Œ≥‚ÇÇ : Dipath x y} (h‚ÇÅ : Œ≥‚ÇÅ = Œ≥‚ÇÇ)
  (h‚ÇÇ : n = m) (hŒ≥‚ÇÅ : covered_partwise hX Œ≥‚ÇÅ n) (hŒ≥‚ÇÇ : covered_partwise hX Œ≥‚ÇÇ m) :
    F‚Çô hŒ≥‚ÇÅ = F‚Çô hŒ≥‚ÇÇ := by subst_vars; rfl

lemma functorOnHomOfCoveredPartwise_cast_params {n m : ‚Ñï} {Œ≥‚ÇÅ Œ≥‚ÇÇ : Dipath x y} (h‚ÇÅ : Œ≥‚ÇÅ = Œ≥‚ÇÇ)
  (h‚ÇÇ : n = m) (hŒ≥‚ÇÅ : covered_partwise hX Œ≥‚ÇÅ n) :
    F‚Çô hŒ≥‚ÇÅ = F‚Çô (covered_partwise_of_equal hX h‚ÇÅ h‚ÇÇ hŒ≥‚ÇÅ) := by subst_vars; rfl

lemma functorOnHomOfCoveredPartwise_cast {x y x' y' : X} {n : ‚Ñï} {Œ≥ : Dipath x y}
  (hŒ≥ : covered_partwise hX Œ≥ n) (hx : x' = x) (hy : y' = y) :
    F‚Çô ((covered_partwise_cast_iff hX Œ≥ hx hy).mp hŒ≥) =
      (eqToHom (by rw [hx])) ‚â´ (F‚Çô hŒ≥) ‚â´ (eqToHom (by rw [hy])) := by
  subst_vars
  rw [eqToHom_refl, eqToHom_refl, Category.comp_id, Category.id_comp]
  apply functorOnHomOfCoveredPartwise_equal
  rfl

lemma functorOnHomOfCoveredPartwise_cast_left {x y x' : X} {n : ‚Ñï} {Œ≥ : Dipath x y}
  (hŒ≥ : covered_partwise hX Œ≥ n) (hx : x' = x) :
    F‚Çô ((covered_partwise_cast_iff hX Œ≥ hx rfl).mp hŒ≥) = (eqToHom (by rw [hx])) ‚â´ (F‚Çô hŒ≥) := by
  subst_vars
  rw [eqToHom_refl, Category.id_comp]
  apply functorOnHomOfCoveredPartwise_equal
  rfl

lemma functorOnHomOfCoveredPartwise_cast_right {x y y' : X} {n : ‚Ñï} {Œ≥ : Dipath x y} (hŒ≥ : covered_partwise hX Œ≥ n) (hy : y' = y) :
    F‚Çô ((covered_partwise_cast_iff hX Œ≥ rfl hy).mp hŒ≥) = (F‚Çô hŒ≥) ‚â´ (eqToHom (by rw [hy])) := by
  subst_vars
  rw [eqToHom_refl, Category.comp_id]
  apply functorOnHomOfCoveredPartwise_equal
  rfl

lemma functorOnHomOfCoveredPartwise_refine_of_covered (k : ‚Ñï):
  Œ† {x y : X} {Œ≥ : Dipath x y} (hŒ≥ : covered hX Œ≥),
    F‚Çô (covered_partwise_of_covered 0 hŒ≥) = F‚Çô (covered_partwise_of_covered k hŒ≥) := by
  induction k
  case zero =>
    intro x y Œ≥ hŒ≥
    rfl
  case succ k ih =>
    intro x y Œ≥ hŒ≥
    rw [functorOnHomOfCoveredPartwise_apply_succ hX h_comm (covered_partwise_of_covered k.succ hŒ≥)]
    show (FunctorOnHomOfCovered hX h_comm hŒ≥) = _
    have : 1 < k + 2 := by linarith
    rw [functorOnHomOfCovered_split_comp hX h_comm hŒ≥ (Fraction.ofPos_pos (lt_trans zero_lt_one this)) (Fraction.ofPos_lt_one this)]
    congr
    apply ih
    exact (covered_split_path (Fraction.ofPos_pos (lt_trans zero_lt_one this)) (Fraction.ofPos_lt_one this) hŒ≥).2

/--
  When a path is partwise covered by n+1 paths, you can apply F‚Çô to both parts of Œ≥, when restricting to
  [0, (d+1)/(n+1)] and [(d+1)/(n+1)]. This lemma states that the composition of these two gives F‚Çô Œ≥
-/
lemma functorOnHomOfCoveredPartwise_split {n : ‚Ñï} :
    Œ† {d : ‚Ñï} (hdn : n > d) {x y : X} {Œ≥ : Dipath x y} (hŒ≥ : covered_partwise hX Œ≥ n),
    F‚Çô hŒ≥ = F‚Çô (covered_partwise_first_part_d hX (Nat.succ_lt_succ hdn) hŒ≥) ‚â´
          F‚Çô (covered_partwise_second_part_d hX (Nat.succ_lt_succ hdn) hŒ≥) := by
  induction n
  case zero =>
    intro d hd
    linarith
  case succ n ih_n =>
    intro d hdn
    induction d
    case zero =>
        intro x y Œ≥ hŒ≥
        rfl
    case succ d _ =>
      intro x y Œ≥ hŒ≥
      rw [functorOnHomOfCoveredPartwise_apply_succ hX h_comm hŒ≥]
      have : n > d := Nat.succ_lt_succ_iff.mp hdn
      rw [ih_n this _]
      rw [functorOnHomOfCoveredPartwise_apply_succ hX h_comm _]
      rw [Category.assoc]
      show F‚ÇÄ _ ‚â´ (F‚Çô _ ‚â´ F‚Çô _) =  F‚ÇÄ _ ‚â´ (F‚Çô _ ‚â´ F‚Çô _)
      apply eq_of_morphism
      ¬∑ apply (comp_eqToHom_iff _ _ _).mp
        rw [‚ÜêfunctorOnHomOfCovered_cast_right]
        apply functorOnHomOfCovered_equal
        rw [SplitProperties.firstPart_of_firstPart Œ≥ (Nat.succ_lt_succ hdn) (Nat.succ_pos d.succ)]
      ¬∑ rw [‚ÜêCategory.assoc]
        apply eq_of_morphism
        ¬∑ apply (comp_eqToHom_iff _ _ _).mp
          apply (eqToHom_comp_iff _ _ _).mp
          rw [‚ÜêfunctorOnHomOfCoveredPartwise_cast]
          apply functorOnHomOfCoveredPartwise_equal
          rw [SplitProperties.first_part_of_second_part Œ≥ (hdn) (Nat.succ_pos d)]
        ¬∑ rw [‚ÜêfunctorOnHomOfCoveredPartwise_cast_left]
          apply functorOnHomOfCoveredPartwise_equal'
          rw [SplitProperties.second_part_of_second_part Œ≥ (Nat.lt_of_succ_lt_succ hdn)]
          rw [Nat.succ_sub_succ]

/--
  If a path can be covered partwise by `(n+1) ‚â• 2` parts, its refinement by covering it by `k*(n+1)` parts is equal to the composition
  of covering the first part in `k` parts and the second part in `k*n` parts.
-/
lemma functorOnHomOfCoveredPartwise_refine_apply (n k : ‚Ñï) {x y : X} {Œ≥ : Dipath x y} (hŒ≥ : covered_partwise hX Œ≥ n.succ) :
    F‚Çô (covered_partwise_refine hX n.succ k hŒ≥) =
      (F‚Çô $ covered_partwise_of_covered k hŒ≥.left) ‚â´ (F‚Çô $ covered_partwise_refine hX n k hŒ≥.right) := by
  have h‚ÇÄ : k + 1 < (n+1+1) * (k + 1) := by
    have : n + 1 + 1 > 1 := by linarith
    convert Nat.mul_lt_mul_of_pos_right (this) (Nat.succ_pos k) using 1
    exact (one_mul k.succ).symm

  have h‚ÇÅ : (n+1+1)*(k+1) - 1 > (k + 1) - 1 := Nat.pred_lt_pred (ne_of_gt (Nat.succ_pos k)) h‚ÇÄ
  have h‚ÇÇ := FractionEqualities.eq_inv‚ÇÅ (Nat.succ_pos k) (le_of_lt (Nat.succ_lt_succ h‚ÇÅ))
  rw [functorOnHomOfCoveredPartwise_split hX h_comm h‚ÇÅ (covered_partwise_refine hX n.succ k hŒ≥)]

  apply eq_of_morphism
  ¬∑ rw [‚ÜêfunctorOnHomOfCoveredPartwise_cast_right hX h_comm _ (congr_arg Œ≥ h‚ÇÇ.symm)]
    apply functorOnHomOfCoveredPartwise_equal hX h_comm
    ext t
    rw [Dipath.cast_apply]
    exact SplitProperties.firstPart_eq_of_point_eq _ h‚ÇÇ.symm _
  ¬∑ rw [‚ÜêfunctorOnHomOfCoveredPartwise_cast_left hX h_comm _ (congr_arg Œ≥ h‚ÇÇ.symm)]
    apply functorOnHomOfCoveredPartwise_equal' hX h_comm
    ext t
    rw [Dipath.cast_apply]
    exact SplitProperties.secondPart_eq_of_point_eq _ h‚ÇÇ.symm _
    simp
    rw [Nat.succ_mul, Nat.sub_right_comm, Nat.add_sub_cancel]

lemma functorOnHomOfCoveredPartwise_refine {n : ‚Ñï} (k : ‚Ñï) :
    Œ† {x y : X} {Œ≥ : Dipath x y} (hŒ≥_n : covered_partwise hX Œ≥ n),
      F‚Çô hŒ≥_n = F‚Çô (covered_partwise_refine hX n k hŒ≥_n) := by
  induction n
  case zero => apply functorOnHomOfCoveredPartwise_refine_of_covered
  case succ n ih =>
    intros x y Œ≥ hŒ≥
    rw [functorOnHomOfCoveredPartwise_refine_apply hX h_comm n k hŒ≥]
    rw [‚Üê functorOnHomOfCoveredPartwise_refine_of_covered hX h_comm _ hŒ≥.left]
    rw [functorOnHomOfCoveredPartwise_apply_succ hX h_comm hŒ≥]
    rw [ih hŒ≥.right]
    rfl

lemma functorOnHomOfCoveredPartwise_apply_right_side {x y : X} {Œ≥ : Dipath x y} {n : ‚Ñï} (hŒ≥ : covered_partwise hX Œ≥ n.succ) :
    F‚Çô hŒ≥ = F‚Çô (covered_partwise_first_part_end_split hX hŒ≥) ‚â´
            F‚ÇÄ (covered_second_part_end_split hX hŒ≥) := by
  rw [functorOnHomOfCoveredPartwise_split hX h_comm (Nat.lt_succ_self n)]
  rw [functorOnHomOfCoveredPartwise_equal' hX h_comm rfl (Nat.sub_self n.succ)]
  rw [functorOnHomOfCoveredPartwise_apply_0]

lemma functorOnHomOfCoveredPartwise_trans_case_0 {x y z : X} {Œ≥‚ÇÅ : Dipath x y} {Œ≥‚ÇÇ : Dipath y z}
  (hŒ≥‚ÇÅ : covered_partwise hX Œ≥‚ÇÅ 0) (hŒ≥‚ÇÇ : covered_partwise hX Œ≥‚ÇÇ 0) :
    F‚Çô (covered_partwise_trans hŒ≥‚ÇÅ hŒ≥‚ÇÇ) = (F‚Çô hŒ≥‚ÇÅ) ‚â´ (F‚Çô hŒ≥‚ÇÇ) := by
  rw [functorOnHomOfCoveredPartwise_apply_0]
  rw [functorOnHomOfCoveredPartwise_apply_0]
  rw [functorOnHomOfCoveredPartwise_apply_succ]
  rw [functorOnHomOfCoveredPartwise_apply_0]
  rw [functorOnHomOfCovered_equal hX h_comm (SplitProperties.first_part_trans Œ≥‚ÇÅ Œ≥‚ÇÇ) _ ((covered_cast_iff Œ≥‚ÇÅ hX _ _).mp hŒ≥‚ÇÅ)]
  rw [functorOnHomOfCovered_equal hX h_comm (SplitProperties.second_part_trans Œ≥‚ÇÅ Œ≥‚ÇÇ) _ ((covered_cast_iff Œ≥‚ÇÇ hX _ _).mp hŒ≥‚ÇÇ)]
  rw [functorOnHomOfCovered_cast_right hX h_comm hŒ≥‚ÇÅ]
  rw [functorOnHomOfCovered_cast_left hX h_comm hŒ≥‚ÇÇ]
  simp

lemma functorOnHomOfCoveredPartwise_trans {n : ‚Ñï} :
    Œ† {x y z : X} {Œ≥‚ÇÅ : Dipath x y} {Œ≥‚ÇÇ : Dipath y z} (hŒ≥‚ÇÅ : covered_partwise hX Œ≥‚ÇÅ n) (hŒ≥‚ÇÇ : covered_partwise hX Œ≥‚ÇÇ n),
      F‚Çô (covered_partwise_trans hŒ≥‚ÇÅ hŒ≥‚ÇÇ) = (F‚Çô hŒ≥‚ÇÅ) ‚â´ (F‚Çô hŒ≥‚ÇÇ) := by
  induction n
  case zero =>
    intro x y z Œ≥‚ÇÅ Œ≥‚ÇÇ hŒ≥‚ÇÅ hŒ≥‚ÇÇ
    exact functorOnHomOfCoveredPartwise_trans_case_0 hX h_comm hŒ≥‚ÇÅ hŒ≥‚ÇÇ
  case succ n ih =>
    intros x y z Œ≥‚ÇÅ Œ≥‚ÇÇ hŒ≥‚ÇÅ hŒ≥‚ÇÇ
    rw [functorOnHomOfCoveredPartwise_apply_succ hX h_comm]
    rw [functorOnHomOfCoveredPartwise_apply_succ hX h_comm hŒ≥‚ÇÅ]
    rw [Category.assoc]
    apply eq_of_morphism
    ¬∑ rw [‚ÜêfunctorOnHomOfCovered_cast_right]
      apply functorOnHomOfCovered_equal
      ext t
      rw [Dipath.cast_apply]
      exact SplitProperties.trans_first_part Œ≥‚ÇÅ Œ≥‚ÇÇ n.succ t
      exact SplitProperties.trans_image_inv_eq_first Œ≥‚ÇÅ Œ≥‚ÇÇ n.succ
    ¬∑ rw [functorOnHomOfCoveredPartwise_apply_right_side hX h_comm hŒ≥‚ÇÇ]
      rw [functorOnHomOfCoveredPartwise_cast_params hX h_comm rfl (Nat.pred_succ n)]
      rw [‚ÜêCategory.assoc (F‚Çô _) _ _]
      rw [‚Üêih _ _]
      have : (n.succ + n.succ).succ - 1 = (n + n).succ.succ := by
        rw [Nat.sub_one]
        rw [Nat.pred_succ (n.succ + n.succ)]
        rw [Nat.succ_add]
        rw [Nat.add_succ]
      rw [functorOnHomOfCoveredPartwise_cast_params hX h_comm rfl this]
      rw [‚ÜêCategory.assoc _ _]
      rw [‚ÜêfunctorOnHomOfCoveredPartwise_cast_left]
      rw [functorOnHomOfCoveredPartwise_apply_right_side hX h_comm _]
      apply eq_of_morphism
      ¬∑ rw [‚ÜêfunctorOnHomOfCoveredPartwise_cast_right]
        apply functorOnHomOfCoveredPartwise_equal' hX h_comm _ rfl
        pick_goal 3
        ext t
        rw [Dipath.cast_apply]
        rw [Dipath.cast_apply]
        exact SplitProperties.trans_first_part_of_second_part Œ≥‚ÇÅ Œ≥‚ÇÇ n t
        exact SplitProperties.trans_image_inv_eq_first Œ≥‚ÇÅ Œ≥‚ÇÇ n.succ
        exact SplitProperties.second_part_trans_eval_at_end Œ≥‚ÇÅ Œ≥‚ÇÇ n
      ¬∑ rw [‚ÜêfunctorOnHomOfCovered_cast_left]
        apply functorOnHomOfCovered_equal
        ext t
        rw [Dipath.cast_apply]
        exact SplitProperties.trans_second_part_second_part Œ≥‚ÇÅ Œ≥‚ÇÇ n t
        exact SplitProperties.second_part_trans_eval_at_end Œ≥‚ÇÅ Œ≥‚ÇÇ n

lemma functorOnHomOfCoveredPartwise_unique {n m : ‚Ñï} {Œ≥ : Dipath x y}
  (hŒ≥_n : covered_partwise hX Œ≥ n) (hŒ≥_m : covered_partwise hX Œ≥ m) :
    F‚Çô hŒ≥_n = F‚Çô hŒ≥_m := by
  rw [functorOnHomOfCoveredPartwise_refine hX h_comm m hŒ≥_n]
  rw [functorOnHomOfCoveredPartwise_refine hX h_comm n hŒ≥_m]
  congr 2
  exact mul_comm _ _


/-
-  ### Define the behaviour on all paths
-/

def FunctorOnHomAux (Œ≥ : Dipath x y) : F_obj ‚ü®x‚ü© ‚ü∂ F_obj ‚ü®y‚ü© :=
  F‚Çô (Classical.choose_spec (has_subpaths hX X‚ÇÅ_open X‚ÇÇ_open Œ≥))

local notation "F_map_aux" => FunctorOnHomAux hX X‚ÇÅ_open X‚ÇÇ_open h_comm


lemma functorOnHomAux_apply {n : ‚Ñï} {Œ≥ : Dipath x y} (hŒ≥ : covered_partwise hX Œ≥ n) :
    F_map_aux Œ≥ = F‚Çô hŒ≥ := functorOnHomOfCoveredPartwise_unique hX h_comm _ _

lemma functorOnHomAux_refl {x : X} : F_map_aux (Dipath.refl x) = ùüô (F_obj ‚ü®x‚ü©) := by
  have : covered_partwise hX (Dipath.refl x) 0 := covered_refl x hX
  rw [functorOnHomAux_apply _ _ _ _ this]
  rw [functorOnHomOfCoveredPartwise_apply_0]
  apply functorOnHomOfCovered_refl

lemma functorOnHomAux_cast {x y x' y' : X} (Œ≥ : Dipath x y) (hx : x' = x) (hy : y' = y) :
    F_map_aux (Œ≥.cast hx hy) = (eqToHom (by rw [hx])) ‚â´ F_map_aux Œ≥ ‚â´ (eqToHom (by rw [hy])) := by
  subst_vars
  rw [eqToHom_refl, eqToHom_refl, Category.comp_id, Category.id_comp]
  apply congr_arg
  ext t
  rfl

lemma functorOnHomAux_trans {x y z : X} (Œ≥‚ÇÅ : Dipath x y) (Œ≥‚ÇÇ : Dipath y z) :
    F_map_aux (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) = F_map_aux Œ≥‚ÇÅ ‚â´ F_map_aux Œ≥‚ÇÇ := by
  cases has_subpaths hX X‚ÇÅ_open X‚ÇÇ_open Œ≥‚ÇÅ
  cases has_subpaths hX X‚ÇÅ_open X‚ÇÇ_open Œ≥‚ÇÇ
  rename_i n hn m hm
  have hn' : covered_partwise hX Œ≥‚ÇÅ ((n + 1) * (m + 1) - 1) := covered_partwise_refine hX n m hn
  have hm' : covered_partwise hX Œ≥‚ÇÇ ((n + 1) * (m + 1) - 1) := (mul_comm (m + 1) _) ‚ñ∏ covered_partwise_refine hX m n hm

  rw [functorOnHomAux_apply hX X‚ÇÅ_open X‚ÇÇ_open h_comm hn']
  rw [functorOnHomAux_apply hX X‚ÇÅ_open X‚ÇÇ_open h_comm hm']
  rw [functorOnHomAux_apply hX X‚ÇÅ_open X‚ÇÇ_open h_comm (covered_partwise_trans hn' hm')]
  rw [functorOnHomOfCoveredPartwise_trans]

lemma functorOnHomAux_split_of_covered_partwise {x y : X} {Œ≥ : Dipath x y} {n : ‚Ñï} (hŒ≥ : covered_partwise hX Œ≥ n.succ) :
    F_map_aux Œ≥ =  F_map_aux (SplitDipath.FirstPart Œ≥ (Fraction (Nat.succ_pos _) (Nat.succ_le_succ (Nat.zero_le n.succ))))
      ‚â´ F_map_aux (SplitDipath.SecondPart Œ≥ (Fraction (Nat.succ_pos _) (Nat.succ_le_succ (Nat.zero_le n.succ)))) := by
  -- Rewrite L.H.S.
  rw [functorOnHomAux_apply hX _ _ h_comm hŒ≥]
  rw [functorOnHomOfCoveredPartwise_apply_succ hX h_comm hŒ≥]

  --Rewrite R.H.S.
  have : covered_partwise hX (SplitDipath.FirstPart Œ≥ _) 0 := hŒ≥.left
  rw [functorOnHomAux_apply hX _ _ h_comm this]
  rw [functorOnHomOfCoveredPartwise_apply_0]
  rw [functorOnHomAux_apply hX _ _ h_comm hŒ≥.right]

lemma functorOnHomAux_of_covered_dihomotopic {x y : X} {Œ≥ Œ≥' : Dipath x y} {F : Dihomotopy Œ≥ Œ≥'}
  (hF : Dipath.Dihomotopy.covered hX F) :
    F_map_aux Œ≥ = F_map_aux Œ≥' := by
  have : covered_partwise hX Œ≥ 0 := Dipath.Dihomotopy.covered_left_of_covered hF
  rw [functorOnHomAux_apply _ _ _ _ this]
  rw [functorOnHomOfCoveredPartwise_apply_0]
  have : covered_partwise hX Œ≥' 0 := Dipath.Dihomotopy.covered_right_of_covered hF
  rw [functorOnHomAux_apply _ _ _ _ this]
  rw [functorOnHomOfCoveredPartwise_apply_0]
  exact functorOnHomOfCovered_dihomotopic hX h_comm hF

lemma functorOnHomAux_of_homotopic_dimaps_0 {f g : D(I, X)} {H : DirectedMap.Dihomotopy f g}
  (hcov : DirectedMap.Dihomotopy.coveredPartwise hX H 0 0) :
    F_map_aux (Dipath.of_directedMap f) ‚â´ F_map_aux (H.eval_at_right 1) =
    F_map_aux (H.eval_at_right 0) ‚â´ F_map_aux (Dipath.of_directedMap g) := by
  let Œì := DihomToPathDihom.dihom_to_path_dihom H
  have Œì_cov : Dipath.Dihomotopy.covered hX Œì := by
    unfold Dipath.Dihomotopy.covered
    cases DirectedMap.Dihomotopy.covered_of_coveredPartwise hcov
    case inl h =>
      left
      exact subset_trans (DihomToPathDihom.dihom_to_path_dihom_range _) h
    case inr h =>
      right
      exact subset_trans (DihomToPathDihom.dihom_to_path_dihom_range _) h

  calc F_map_aux (Dipath.of_directedMap f) ‚â´ F_map_aux (H.eval_at_right 1)
    _ = (ùüô (F_obj ‚ü®f 0‚ü©) ‚â´ F_map_aux (of_directedMap f)) ‚â´ F_map_aux (H.eval_at_right 1)
          := by rw [Category.id_comp]
    _ = (F_map_aux (Dipath.refl (f 0)) ‚â´ F_map_aux (of_directedMap f)) ‚â´ F_map_aux (H.eval_at_right 1)
          := by rw [functorOnHomAux_refl]
    _ = F_map_aux ((Dipath.refl (f 0)).trans (of_directedMap f)) ‚â´ F_map_aux (H.eval_at_right 1)
          := by rw [functorOnHomAux_trans]
    _ = F_map_aux (((Dipath.refl (f 0)).trans (of_directedMap f)).trans (H.eval_at_right 1))
          := by rw [‚ÜêfunctorOnHomAux_trans]
    _ = F_map_aux (((H.eval_at_right 0).trans (of_directedMap g)).trans (refl (g 1)))
          := functorOnHomAux_of_covered_dihomotopic hX X‚ÇÅ_open X‚ÇÇ_open h_comm Œì_cov
    _ = F_map_aux ((H.eval_at_right 0).trans (of_directedMap g)) ‚â´ F_map_aux (refl (g 1))
          := by rw [functorOnHomAux_trans]
    _ = F_map_aux ((H.eval_at_right 0).trans (of_directedMap g)) ‚â´ ùüô (F_obj ‚ü®g 1‚ü©)
          := by rw [functorOnHomAux_refl]
    _ = F_map_aux ((H.eval_at_right 0).trans (of_directedMap g))
          := by rw [Category.comp_id]
    _ = F_map_aux (H.eval_at_right 0) ‚â´ F_map_aux (Dipath.of_directedMap g)
          := by rw [functorOnHomAux_trans]

lemma functorOnHomAux_of_homotopic_dimaps {m : ‚Ñï} :
    Œ†  {f g : D(I, X)} {H : DirectedMap.Dihomotopy f g} (_ : DirectedMap.Dihomotopy.coveredPartwise hX H 0 m),
      F_map_aux (Dipath.of_directedMap f) ‚â´ F_map_aux (H.eval_at_right 1) =
      F_map_aux (H.eval_at_right 0) ‚â´ F_map_aux (Dipath.of_directedMap g) := by
  induction m
  case zero => exact fun hcov => functorOnHomAux_of_homotopic_dimaps_0 _ _ _ _ hcov

  case succ m ih =>
    intro f g H hcov
    have f_cov : covered_partwise hX (Dipath.of_directedMap f) m.succ :=
      DirectedMap.Dihomotopy.path_covered_partiwse_of_dihomotopy_coveredPartwise_left hcov
    have g_cov : covered_partwise hX (Dipath.of_directedMap g) m.succ :=
      DirectedMap.Dihomotopy.path_covered_partiwse_of_dihomotopy_coveredPartwise_right hcov

    -- Split at 1/(m.succ + 1)
    let T := Fraction (Nat.succ_pos m.succ) (Nat.succ_le_succ (Nat.zero_le m.succ))

    let f‚ÇÅ := (SplitDipath.FirstPart (Dipath.of_directedMap f) T)
    let f‚ÇÇ := (SplitDipath.SecondPart (Dipath.of_directedMap f) T)

    let g‚ÇÅ := (SplitDipath.FirstPart (Dipath.of_directedMap g) T)
    let g‚ÇÇ := (SplitDipath.SecondPart (Dipath.of_directedMap g) T)

    have h‚ÇÅ : F_map_aux f‚ÇÇ ‚â´ F_map_aux (H.eval_at_right 1) = F_map_aux (H.eval_at_right T) ‚â´ F_map_aux g‚ÇÇ := by
      have := ih (DirectedMap.Dihomotopy.coveredPartwise_second_hpart hcov)
      rw [SplitDihomotopy.sph_eval_0] at this
      rw [SplitDihomotopy.sph_eval_1] at this
      rw [Dipath.dipath_of_directed_map_of_to_dimap] at this
      rw [Dipath.dipath_of_directed_map_of_to_dimap] at this
      rw [functorOnHomAux_cast] at this
      rw [functorOnHomAux_cast] at this
      rw [functorOnHomAux_cast] at this
      rw [functorOnHomAux_cast] at this
      simp at this
      have := (eqToHom_comp_iff _ _ _).mp this
      rw [‚ÜêCategory.assoc] at this
      have := (comp_eqToHom_iff _ _ _).mp this
      rw [this]
      simp

    have h‚ÇÇ : F_map_aux f‚ÇÅ ‚â´ F_map_aux (H.eval_at_right T) = F_map_aux (H.eval_at_right 0) ‚â´ F_map_aux g‚ÇÅ := by
      have := functorOnHomAux_of_homotopic_dimaps_0 hX X‚ÇÅ_open X‚ÇÇ_open h_comm
            (DirectedMap.Dihomotopy.coveredPartwise_first_hpart hcov)
      rw [SplitDihomotopy.fph_eval_0] at this
      rw [SplitDihomotopy.fph_eval_1] at this
      rw [Dipath.dipath_of_directed_map_of_to_dimap] at this
      rw [Dipath.dipath_of_directed_map_of_to_dimap] at this
      rw [functorOnHomAux_cast] at this
      rw [functorOnHomAux_cast] at this
      rw [functorOnHomAux_cast] at this
      rw [functorOnHomAux_cast] at this
      simp at this
      have := (eqToHom_comp_iff _ _ _).mp this
      rw [‚ÜêCategory.assoc] at this
      have := (comp_eqToHom_iff _ _ _).mp this
      rw [this]
      simp

    calc F_map_aux (Dipath.of_directedMap f) ‚â´ F_map_aux (H.eval_at_right 1)
      _ = (F_map_aux f‚ÇÅ ‚â´ F_map_aux f‚ÇÇ) ‚â´ F_map_aux (H.eval_at_right 1)
            := by rw [functorOnHomAux_split_of_covered_partwise _ _ _ _ f_cov]
      _ = F_map_aux f‚ÇÅ ‚â´ (F_map_aux f‚ÇÇ ‚â´ F_map_aux (H.eval_at_right 1))
            := by rw [Category.assoc]
      _ = F_map_aux f‚ÇÅ ‚â´ (F_map_aux (H.eval_at_right T) ‚â´ F_map_aux g‚ÇÇ)
            := by rw [h‚ÇÅ]
      _ = (F_map_aux f‚ÇÅ ‚â´ F_map_aux (H.eval_at_right T)) ‚â´ F_map_aux g‚ÇÇ
            := by rw [Category.assoc]
      _ = (F_map_aux (H.eval_at_right 0) ‚â´ F_map_aux g‚ÇÅ) ‚â´ F_map_aux g‚ÇÇ
            := by rw [h‚ÇÇ]
      _ = F_map_aux (H.eval_at_right 0) ‚â´ (F_map_aux g‚ÇÅ ‚â´ F_map_aux g‚ÇÇ)
            := by rw [Category.assoc]
      _ = F_map_aux (H.eval_at_right 0) ‚â´ F_map_aux (Dipath.of_directedMap g)
            := by rw [functorOnHomAux_split_of_covered_partwise _ _ _ _ g_cov]

lemma functorOnHomAux_of_covered_dihomotopic_zero_m {m : ‚Ñï} {x y : X} {Œ≥ Œ≥' : Dipath x y}
  (h : Dipath.Dihomotopy.dihomotopicCovered hX Œ≥ Œ≥' 0 m) :
    F_map_aux Œ≥ = F_map_aux Œ≥' := by
  cases h
  rename_i G HG
  have h‚ÇÅ : F_map_aux ((G.eval_at_right 0)) = (eqToHom (by simp)) ‚â´
            (ùüô (F_obj ‚ü®x‚ü©)) ‚â´ (eqToHom (by simp)) := by
    have : G.eval_at_right 0 = (Dipath.refl x).cast Œ≥.source Œ≥'.source := by
      ext t
      show G (t, 0) = x
      simp
    rw [this]
    rw [functorOnHomAux_cast]
    rw [functorOnHomAux_refl]

  have h‚ÇÇ : F_map_aux ((G.eval_at_right 1)) = (eqToHom (by simp)) ‚â´
            (ùüô (F_obj ‚ü®y‚ü©)) ‚â´ (eqToHom (by simp)) := by
    have : G.eval_at_right 1 = (Dipath.refl y).cast Œ≥.target Œ≥'.target := by
      ext t
      show G (t, 1) = y
      simp
    rw [this]
    rw [functorOnHomAux_cast]
    rw [functorOnHomAux_refl]

  have := functorOnHomAux_of_homotopic_dimaps hX X‚ÇÅ_open X‚ÇÇ_open h_comm HG
  rw [h‚ÇÅ, h‚ÇÇ] at this
  rw [Dipath.dipath_of_directed_map_of_to_dimap] at this
  rw [Dipath.dipath_of_directed_map_of_to_dimap] at this
  rw [functorOnHomAux_cast] at this
  rw [functorOnHomAux_cast] at this
  simp at this
  have := (comp_eqToHom_iff _ _ _).mp ((eqToHom_comp_iff _ _ _).mp this)
  simp at this
  exact this

lemma functorOnHomAux_of_partwise_covered_dihomotopic :
    Œ† {n m : ‚Ñï} {x y : X} {Œ≥ Œ≥' : Dipath x y} (_ : Dipath.Dihomotopy.dihomotopicCovered hX Œ≥ Œ≥' n m),
    F_map_aux Œ≥ = F_map_aux Œ≥' := by
  intro n m
  induction n
  case zero =>
    intro x y Œ≥ Œ≥' h
    exact functorOnHomAux_of_covered_dihomotopic_zero_m hX X‚ÇÅ_open X‚ÇÇ_open h_comm h
  case succ n ih =>
    rintro x y Œ≥ Œ≥' ‚ü®F, hF‚ü©
    have ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := Dipath.Dihomotopy.dihomotopicCovered_split hX hF
    rw [functorOnHomAux_of_covered_dihomotopic_zero_m hX X‚ÇÅ_open X‚ÇÇ_open h_comm h‚ÇÅ]
    exact ih h‚ÇÇ

lemma functorOnHomAux_of_pre_dihomotopic {Œ≥ Œ≥' : Dipath x y} (h : Œ≥.PreDihomotopic Œ≥') :
    F_map_aux Œ≥ = F_map_aux Œ≥' := by
  rcases Dipath.Dihomotopy.dihomotopicCovered_exists_of_preDihomotopic hX h X‚ÇÅ_open X‚ÇÇ_open with ‚ü®n, m, h‚ü©
  exact functorOnHomAux_of_partwise_covered_dihomotopic hX X‚ÇÅ_open X‚ÇÇ_open h_comm h

lemma functorOnHomAux_of_dihomotopic (Œ≥ Œ≥' : Dipath x y) (h : Œ≥.Dihomotopic Œ≥') :
    F_map_aux Œ≥ = F_map_aux Œ≥' :=
  EqvGen.rec
    (fun _ _ h => functorOnHomAux_of_pre_dihomotopic _ _ _ _ h)
    (fun _ => rfl)
    (fun _ _ _ h => h.symm)
    (fun _ _ _ _ _ h‚ÇÅ h‚ÇÇ => Eq.trans h‚ÇÅ h‚ÇÇ)
  h


/-
-  ### Define the behaviour on quotient of paths
-/

def FunctorOnHom {x y : dœÄ‚Çì X} (Œ≥ : x ‚ü∂ y) : F_obj x ‚ü∂ F_obj y :=
 Quotient.liftOn Œ≥ F_map_aux (functorOnHomAux_of_dihomotopic hX X‚ÇÅ_open X‚ÇÇ_open h_comm)

local notation "F_map" => FunctorOnHom hX X‚ÇÅ_open X‚ÇÇ_open h_comm

lemma functorOnHom_apply (Œ≥ : Dipath x y) :
  F_map ‚ü¶Œ≥‚üß = F_map_aux Œ≥ := rfl

lemma functorOnHom_trans {x y z : X} (Œ≥‚ÇÅ : Dipath x y) (Œ≥‚ÇÇ : Dipath y z) :
    F_map ‚ü¶Œ≥‚ÇÅ.trans Œ≥‚ÇÇ‚üß = F_map ‚ü¶Œ≥‚ÇÅ‚üß ‚â´ F_map ‚ü¶Œ≥‚ÇÇ‚üß := by
  repeat { rw [functorOnHom_apply] }
  exact functorOnHomAux_trans hX X‚ÇÅ_open X‚ÇÇ_open h_comm Œ≥‚ÇÅ Œ≥‚ÇÇ

lemma functorOnHom_id (x : dœÄ‚Çì X) : F_map (ùüô x) = ùüô (F_obj x) := by
  rw [id_eq_path_refl]
  rw [functorOnHom_apply]
  apply functorOnHomAux_refl

lemma functorOnHom_comp_path {x y z  : X} (Œ≥‚ÇÅ : Dipath x y) (Œ≥‚ÇÇ : Dipath y z) :
    F_map (‚ü¶Œ≥‚ÇÅ‚üß ‚â´ ‚ü¶Œ≥‚ÇÇ‚üß) = F_map ‚ü¶Œ≥‚ÇÅ‚üß ‚â´ F_map ‚ü¶Œ≥‚ÇÇ‚üß := by
  rw [functorOnHom_apply]
  rw [functorOnHom_apply]
  rw [comp_eq]
  rw [‚ÜêDipath.Dihomotopic.comp_lift]
  exact functorOnHom_trans hX X‚ÇÅ_open X‚ÇÇ_open h_comm Œ≥‚ÇÅ Œ≥‚ÇÇ

lemma functorOnHom_comp {x y z  : dœÄ‚Çì X} (Œ≥‚ÇÅ : x ‚ü∂ y) (Œ≥‚ÇÇ : y ‚ü∂ z) :
    F_map (Œ≥‚ÇÅ ‚â´ Œ≥‚ÇÇ) = F_map Œ≥‚ÇÅ ‚â´ F_map Œ≥‚ÇÇ := by
  have := functorOnHom_comp_path hX X‚ÇÅ_open X‚ÇÇ_open h_comm (Œ≥‚ÇÅ.out) (Œ≥‚ÇÇ.out)
  rw [Quotient.out_eq] at this
  rw [Quotient.out_eq] at this
  exact this

/-
  ## Define the functor F : (dœÄ‚Çì X) ‚ü∂ C
-/
def Functor : (dœÄ‚Çì X) ‚ü∂ C where
  obj := F_obj
  map Œ≥ := F_map Œ≥
  map_id x := functorOnHom_id hX X‚ÇÅ_open X‚ÇÇ_open h_comm x
  map_comp Œ≥‚ÇÅ Œ≥‚ÇÇ := functorOnHom_comp hX X‚ÇÅ_open X‚ÇÇ_open h_comm Œ≥‚ÇÅ Œ≥‚ÇÇ

local notation "F" => Functor hX X‚ÇÅ_open X‚ÇÇ_open h_comm

lemma functorObj_def {x : dœÄ‚Çì X} : (F).obj x = F_obj x := rfl
lemma functorHom_def {x y : dœÄ‚Çì X} (f : x ‚ü∂ y) : (F).map f = F_map f := rfl

lemma functor_comp_left_object (x : X‚ÇÅ) : (F).obj ((dœÄ‚Çò j‚ÇÅ).obj ‚ü®x‚ü©) = F‚ÇÅ.obj ‚ü®x‚ü© := by
  show F_obj ‚ü®j‚ÇÅ _‚ü© = _
  rw [‚ÜêfunctorOnObj_apply_one hX h_comm]
  congr 1

lemma functor_comp_left_dipath {x y : X‚ÇÅ} (Œ≥ : Dipath x y) : F_map ((dœÄ‚Çò j‚ÇÅ).map ‚ü¶Œ≥‚üß) =
    (eqToHom (functor_comp_left_object hX X‚ÇÅ_open X‚ÇÇ_open h_comm x)) ‚â´ (F‚ÇÅ.map ‚ü¶Œ≥‚üß) ‚â´
    (eqToHom (functor_comp_left_object hX X‚ÇÅ_open X‚ÇÇ_open h_comm y).symm)
     := by
  rw [subtype_path_class_eq_map]
  rw [functorOnHom_apply]
  have h‚ÇÅ : range (Œ≥.map (DirectedSubtypeInclusion X‚ÇÅ)) ‚äÜ X‚ÇÅ := range_dipath_map_inclusion Œ≥
  have h‚ÇÇ : covered_partwise hX (Œ≥.map (DirectedSubtypeInclusion X‚ÇÅ)) 0 := Or.inl h‚ÇÅ
  rw [functorOnHomAux_apply hX X‚ÇÅ_open X‚ÇÇ_open h_comm h‚ÇÇ]
  rw [functorOnHomOfCoveredPartwise_apply_0]
  rw [functorOnHomOfCovered_apply_left' hX h_comm h‚ÇÅ]
  rw [FunctorOnHomOfCoveredAux‚ÇÅ]
  rw [subtypeDipath_of_included_dipath_eq]
  rw [functor_cast F‚ÇÅ Œ≥]
  simp

/- Shpw that the two obtained triangles commute -/
lemma functor_comp_left : (dœÄ‚Çò j‚ÇÅ) ‚ãô F = F‚ÇÅ := by
  apply CategoryTheory.Functor.ext
  intros x y f
  show F_map _ = _
  rw [‚ÜêQuotient.out_eq f]
  rw [functor_comp_left_dipath hX X‚ÇÅ_open X‚ÇÇ_open h_comm f.out]

lemma functor_comp_right_object (x : X‚ÇÇ) : (F).obj ((dœÄ‚Çò j‚ÇÇ).obj ‚ü®x‚ü©) = F‚ÇÇ.obj ‚ü®x‚ü© := by
  show F_obj ‚ü®j‚ÇÇ _‚ü© = _
  rw [‚ÜêfunctorOnObj_apply_two hX h_comm]
  congr 1

lemma functor_comp_right_dipath {x y : X‚ÇÇ} (Œ≥ : Dipath x y) : F_map ((dœÄ‚Çò j‚ÇÇ).map ‚ü¶Œ≥‚üß) =
    (eqToHom (functor_comp_right_object hX X‚ÇÅ_open X‚ÇÇ_open h_comm x)) ‚â´ (F‚ÇÇ.map ‚ü¶Œ≥‚üß) ‚â´
    (eqToHom (functor_comp_right_object hX X‚ÇÅ_open X‚ÇÇ_open h_comm y).symm)
     := by
  rw [subtype_path_class_eq_map]
  rw [functorOnHom_apply]
  have h‚ÇÅ : range (Œ≥.map (DirectedSubtypeInclusion X‚ÇÇ)) ‚äÜ X‚ÇÇ := range_dipath_map_inclusion Œ≥
  have h‚ÇÇ : covered_partwise hX (Œ≥.map (DirectedSubtypeInclusion X‚ÇÇ)) 0 := Or.inr h‚ÇÅ
  rw [functorOnHomAux_apply hX X‚ÇÅ_open X‚ÇÇ_open h_comm h‚ÇÇ]
  rw [functorOnHomOfCoveredPartwise_apply_0]
  rw [functorOnHomOfCovered_apply_right' hX h_comm h‚ÇÅ]
  rw [FunctorOnHomOfCoveredAux‚ÇÇ]
  rw [subtypeDipath_of_included_dipath_eq]
  rw [functor_cast F‚ÇÇ Œ≥]
  simp

lemma functor_comp_right : (dœÄ‚Çò j‚ÇÇ) ‚â´ F = F‚ÇÇ := by
  apply CategoryTheory.Functor.ext
  intros x y f
  show F_map _ = _
  rw [‚ÜêQuotient.out_eq f]
  rw [functor_comp_right_dipath hX X‚ÇÅ_open X‚ÇÇ_open h_comm f.out]

lemma functor_uniq_aux_obj (F' : (dœÄ‚Çì X) ‚ü∂ C) (h‚ÇÅ : (dœÄ‚Çò j‚ÇÅ) ‚â´ F' = F‚ÇÅ) (h‚ÇÇ : (dœÄ‚Çò j‚ÇÇ) ‚â´ F' = F‚ÇÇ) (x : X) :
    F'.obj ‚ü®x‚ü© = (F).obj ‚ü®x‚ü© := by
  rw [functorObj_def]
  cases ((Set.mem_union x X‚ÇÅ X‚ÇÇ).mp (Filter.mem_top.mpr hX x))
  case inl hx‚ÇÅ =>
    rw [‚ÜêfunctorOnObj_apply_one hX h_comm hx‚ÇÅ]
    rw [obj_eq_obj_of_eq h‚ÇÅ.symm]
    show F'.obj _ = F'.obj _
    apply congrArg
    rfl
  case inr hx‚ÇÇ =>
    rw [‚ÜêfunctorOnObj_apply_two hX h_comm hx‚ÇÇ]
    rw [obj_eq_obj_of_eq h‚ÇÇ.symm]
    show F'.obj _ = F'.obj _
    apply congrArg
    rfl

lemma functor_uniq_of_covered (F' : (dœÄ‚Çì X) ‚ü∂ C) (h‚ÇÅ : (dœÄ‚Çò j‚ÇÅ) ‚â´ F' = F‚ÇÅ) (h‚ÇÇ : (dœÄ‚Çò j‚ÇÇ) ‚â´ F' = F‚ÇÇ)
  {x y : X} {Œ≥ : Dipath x y} (hŒ≥ : covered hX Œ≥) :
    F'.map ‚ü¶Œ≥‚üß = (eqToHom (functor_uniq_aux_obj hX X‚ÇÅ_open X‚ÇÇ_open h_comm F' h‚ÇÅ h‚ÇÇ x)) ‚â´
      (F).map ‚ü¶Œ≥‚üß ‚â´ (eqToHom (functor_uniq_aux_obj hX X‚ÇÅ_open X‚ÇÇ_open h_comm F' h‚ÇÅ h‚ÇÇ y).symm) := by
  rw [functorHom_def]
  rw [functorOnHom_apply]
  have : covered_partwise hX Œ≥ 0 := hŒ≥
  rw [functorOnHomAux_apply _ _ _ _ this]
  rw [functorOnHomOfCoveredPartwise_apply_0 _ _ this]
  cases hŒ≥
  case inl hŒ≥ =>
    rw [functorOnHomOfCovered_apply_left' _ _ hŒ≥]
    unfold FunctorOnHomOfCoveredAux‚ÇÅ
    calc F'.map ‚ü¶Œ≥‚üß
      _ = F'.map ((dœÄ‚Çò j‚ÇÅ).map ‚ü¶SubtypeDipath Œ≥ hŒ≥‚üß) := (congrArg F'.map (map_subtypeDipath_eq Œ≥ hŒ≥)).symm
      _ = ((dœÄ‚Çò j‚ÇÅ) ‚â´ F').map ‚ü¶SubtypeDipath Œ≥ hŒ≥‚üß := rfl
      _ = _ := by rw [map_eq_map_of_eq h‚ÇÅ]
      _ = _ := by simp
  case inr hŒ≥ =>
    rw [functorOnHomOfCovered_apply_right' _ _ hŒ≥]
    unfold FunctorOnHomOfCoveredAux‚ÇÇ
    calc F'.map ‚ü¶Œ≥‚üß
      _ = F'.map ((dœÄ‚Çò j‚ÇÇ).map ‚ü¶SubtypeDipath Œ≥ hŒ≥‚üß) := (congrArg F'.map (map_subtypeDipath_eq Œ≥ hŒ≥)).symm
      _ = ((dœÄ‚Çò j‚ÇÇ) ‚â´ F').map ‚ü¶SubtypeDipath Œ≥ hŒ≥‚üß := rfl
      _ = _ := by rw [map_eq_map_of_eq h‚ÇÇ]
      _ = _ := by simp

lemma functor_uniq_aux_map (F' : (dœÄ‚Çì X) ‚ü∂ C) (h‚ÇÅ : (dœÄ‚Çò j‚ÇÅ) ‚â´ F' = F‚ÇÅ) (h‚ÇÇ : (dœÄ‚Çò j‚ÇÇ) ‚â´ F' = F‚ÇÇ) {n : ‚Ñï} :
    Œ† {x y : X} {Œ≥ : Dipath x y} (_ : covered_partwise hX Œ≥ n), F'.map ‚ü¶Œ≥‚üß =
      (eqToHom (functor_uniq_aux_obj hX X‚ÇÅ_open X‚ÇÇ_open h_comm F' h‚ÇÅ h‚ÇÇ x)) ‚â´ (F).map ‚ü¶Œ≥‚üß
        ‚â´ (eqToHom (functor_uniq_aux_obj hX X‚ÇÅ_open X‚ÇÇ_open h_comm F' h‚ÇÅ h‚ÇÇ y).symm) := by
  induction n
  case zero =>
    intros x y Œ≥ hŒ≥
    exact functor_uniq_of_covered _ _ _ _ F' h‚ÇÅ h‚ÇÇ hŒ≥
  case succ n ih =>
    intros x y Œ≥ hŒ≥
    let T := Fraction (Nat.succ_pos n.succ) (Nat.succ_le_succ (Nat.zero_le n.succ)) -- T = 1/(n+1+1)
    have hT‚ÇÄ : 0 < T := Fraction.pos_of_pos (zero_lt_one) _
    have hT‚ÇÅ : T < 1 := Fraction.lt_one_of_lt (zero_le_one) (Nat.succ_lt_succ (Nat.succ_pos n))
    rw [SplitDipath.first_trans_second_reparam_eq_self Œ≥ hT‚ÇÄ hT‚ÇÅ]
    rw [Dipath.Dihomotopic.quot_reparam]
    rw [Dipath.Dihomotopic.comp_lift]
    rw [‚Üê comp_eq]
    rw [CategoryTheory.Functor.map_comp]
    rw [CategoryTheory.Functor.map_comp]
    rw [functor_uniq_of_covered hX X‚ÇÅ_open X‚ÇÇ_open h_comm  F' h‚ÇÅ h‚ÇÇ hŒ≥.left]
    rw [ih hŒ≥.right]
    simp

lemma functor_uniq (F' : (dœÄ‚Çì X) ‚ü∂ C) (h‚ÇÅ : (dœÄ‚Çò j‚ÇÅ) ‚â´ F' = F‚ÇÅ) (h‚ÇÇ : (dœÄ‚Çò j‚ÇÇ) ‚â´ F' = F‚ÇÇ) : F' = F := by
  apply CategoryTheory.Functor.ext
  intros x y f
  rw [‚ÜêQuotient.out_eq f]
  cases has_subpaths hX X‚ÇÅ_open X‚ÇÇ_open (Quotient.out f)
  rename_i n hn
  exact functor_uniq_aux_map hX X‚ÇÅ_open X‚ÇÇ_open h_comm F' h‚ÇÅ h‚ÇÇ hn

end PushoutFunctor

/--
  The Van Kampen Theorem: the fundamental category functor dœÄ induces a pushout in the category of categories.
-/
theorem directed_van_kampen (_ : IsOpen X‚ÇÅ) (_ : IsOpen X‚ÇÇ) (hX : X‚ÇÅ ‚à™ X‚ÇÇ = Set.univ) :
    IsPushout (dœÄ‚Çò i‚ÇÅ) (dœÄ‚Çò i‚ÇÇ) (dœÄ‚Çò j‚ÇÅ) (dœÄ‚Çò j‚ÇÇ) := by
  apply PushoutAlternative.isPushout_alternative
  ¬∑ rw [‚ÜêFunctor.map_comp]
    rw [‚ÜêFunctor.map_comp]
    exact congr_arg dœÄ‚Çò rfl
  intros C F‚ÇÅ F‚ÇÇ h_comm
  use (PushoutFunctor.Functor hX X‚ÇÅ_open X‚ÇÇ_open h_comm)
  constructor
  constructor
  ¬∑ apply PushoutFunctor.functor_comp_left
  ¬∑ apply PushoutFunctor.functor_comp_right
  ¬∑ rintro F' ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    exact PushoutFunctor.functor_uniq hX X‚ÇÅ_open X‚ÇÇ_open h_comm F' h‚ÇÅ h‚ÇÇ

end DirectedVanKampen
